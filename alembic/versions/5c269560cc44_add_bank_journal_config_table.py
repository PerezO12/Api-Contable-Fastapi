"""add_bank_journal_config_table

Revision ID: 5c269560cc44
Revises: 63f5f0bff4c9
Create Date: 2025-07-01 23:07:43.480598

"""
from typing import Sequence, Union

from alembic import op
import sqlalchemy as sa
from sqlalchemy.dialects import postgresql

# revision identifiers, used by Alembic.
revision: str = '5c269560cc44'
down_revision: Union[str, None] = '63f5f0bff4c9'
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    """Upgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table('bank_journal_configs',
    sa.Column('journal_id', sa.UUID(), autoincrement=False, nullable=False, comment='ID del diario bancario'),
    sa.Column('bank_account_number', sa.VARCHAR(length=50), autoincrement=False, nullable=True, comment='Número de cuenta bancaria asociada'),
    sa.Column('bank_account_id', sa.UUID(), autoincrement=False, nullable=True, comment='Cuenta bancaria principal (activo)'),
    sa.Column('transit_account_id', sa.UUID(), autoincrement=False, nullable=True, comment='Cuenta transitoria para operaciones en proceso'),
    sa.Column('profit_account_id', sa.UUID(), autoincrement=False, nullable=True, comment='Cuenta de ganancias (intereses, diferencias positivas)'),
    sa.Column('loss_account_id', sa.UUID(), autoincrement=False, nullable=True, comment='Cuenta de pérdidas (comisiones, diferencias negativas)'),
    sa.Column('dedicated_payment_sequence', sa.BOOLEAN(), autoincrement=False, nullable=False, comment='Si usar secuencia dedicada para pagos (separada de transacciones)'),
    sa.Column('allow_inbound_payments', sa.BOOLEAN(), autoincrement=False, nullable=False, comment='Si permite pagos entrantes (cobros)'),
    sa.Column('inbound_payment_mode', postgresql.ENUM('MANUAL', 'BATCH', name='paymentmode', create_type=False), autoincrement=False, nullable=False, comment='Modo de procesamiento de pagos entrantes'),
    sa.Column('inbound_receipt_account_id', sa.UUID(), autoincrement=False, nullable=True, comment='Cuenta de recibo para pagos entrantes'),
    sa.Column('allow_outbound_payments', sa.BOOLEAN(), autoincrement=False, nullable=False, comment='Si permite pagos salientes'),
    sa.Column('outbound_payment_mode', postgresql.ENUM('MANUAL', 'BATCH', name='paymentmode', create_type=False), autoincrement=False, nullable=False, comment='Modo de procesamiento de pagos salientes'),
    sa.Column('outbound_payment_method', sa.VARCHAR(length=50), autoincrement=False, nullable=True, comment='Método de pago por defecto para salientes'),
    sa.Column('outbound_payment_name', sa.VARCHAR(length=100), autoincrement=False, nullable=True, comment='Nombre descriptivo para pagos salientes'),
    sa.Column('outbound_pending_account_id', sa.UUID(), autoincrement=False, nullable=True, comment='Cuenta de pagos pendientes para salientes'),
    sa.Column('currency_code', sa.VARCHAR(length=3), autoincrement=False, nullable=False, comment='Moneda principal del diario bancario'),
    sa.Column('allow_currency_exchange', sa.BOOLEAN(), autoincrement=False, nullable=False, comment='Si permite operaciones con múltiples monedas'),
    sa.Column('auto_reconcile', sa.BOOLEAN(), autoincrement=False, nullable=False, comment='Si intenta conciliación automática'),
    sa.Column('description', sa.TEXT(), autoincrement=False, nullable=True, comment='Descripción de la configuración bancaria'),
    sa.ForeignKeyConstraint(['bank_account_id'], ['accounts.id'], name=op.f('fk_bank_journal_configs_bank_account_id_accounts')),
    sa.ForeignKeyConstraint(['inbound_receipt_account_id'], ['accounts.id'], name=op.f('fk_bank_journal_configs_inbound_receipt_account_id_accounts')),
    sa.ForeignKeyConstraint(['journal_id'], ['journals.id'], name=op.f('fk_bank_journal_configs_journal_id_journals'), ondelete='CASCADE'),
    sa.ForeignKeyConstraint(['loss_account_id'], ['accounts.id'], name=op.f('fk_bank_journal_configs_loss_account_id_accounts')),
    sa.ForeignKeyConstraint(['outbound_pending_account_id'], ['accounts.id'], name=op.f('fk_bank_journal_configs_outbound_pending_account_id_accounts')),
    sa.ForeignKeyConstraint(['profit_account_id'], ['accounts.id'], name=op.f('fk_bank_journal_configs_profit_account_id_accounts')),
    sa.ForeignKeyConstraint(['transit_account_id'], ['accounts.id'], name=op.f('fk_bank_journal_configs_transit_account_id_accounts')),
    sa.PrimaryKeyConstraint('journal_id', name=op.f('pk_bank_journal_configs'))
    )
    # ### end Alembic commands ###


def downgrade() -> None:
    """Downgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_table('bank_journal_configs')
    # ### end Alembic commands ###