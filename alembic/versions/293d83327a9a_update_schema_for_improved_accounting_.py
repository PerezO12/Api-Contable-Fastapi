"""Update schema for improved accounting system

Revision ID: 293d83327a9a
Revises: b0073181356e
Create Date: 2025-06-09 18:08:35.772850

"""
from typing import Sequence, Union

from alembic import op
import sqlalchemy as sa
from sqlalchemy.dialects import postgresql

# revision identifiers, used by Alembic.
revision: str = '293d83327a9a'
down_revision: Union[str, None] = 'b0073181356e'
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    """Upgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_table('number_sequence')
    op.add_column('accounts', sa.Column('allows_movements', sa.Boolean(), nullable=False, server_default='true'))
    op.add_column('accounts', sa.Column('requires_third_party', sa.Boolean(), nullable=False, server_default='false'))
    op.add_column('accounts', sa.Column('requires_cost_center', sa.Boolean(), nullable=False, server_default='false'))
    op.add_column('accounts', sa.Column('balance', sa.Numeric(precision=15, scale=2), nullable=False, server_default='0'))
    op.add_column('accounts', sa.Column('debit_balance', sa.Numeric(precision=15, scale=2), nullable=False, server_default='0'))
    op.add_column('accounts', sa.Column('credit_balance', sa.Numeric(precision=15, scale=2), nullable=False, server_default='0'))
    op.add_column('accounts', sa.Column('notes', sa.Text(), nullable=True))
    op.alter_column('accounts', 'description',
               existing_type=sa.VARCHAR(length=500),
               type_=sa.Text(),
               existing_nullable=True)
    op.alter_column('accounts', 'category',
               existing_type=postgresql.ENUM('CURRENT_ASSET', 'NON_CURRENT_ASSET', 'CURRENT_LIABILITY', 'NON_CURRENT_LIABILITY', 'CAPITAL', 'RETAINED_EARNINGS', 'OPERATING_REVENUE', 'NON_OPERATING_REVENUE', 'OPERATING_EXPENSE', 'NON_OPERATING_EXPENSE', name='accountcategory'),
               nullable=True)
    op.drop_index(op.f('ix_accounts_account_type'), table_name='accounts')
    op.drop_index(op.f('ix_accounts_level'), table_name='accounts')
    op.drop_constraint(op.f('uq_accounts_code'), 'accounts', type_='unique')
    op.drop_index(op.f('ix_accounts_code'), table_name='accounts')
    op.create_index(op.f('ix_accounts_code'), 'accounts', ['code'], unique=True)
    op.create_index(op.f('ix_accounts_id'), 'accounts', ['id'], unique=False)
    op.create_index(op.f('ix_accounts_parent_id'), 'accounts', ['parent_id'], unique=False)
    op.drop_constraint(op.f('fk_accounts_created_by_id_users'), 'accounts', type_='foreignkey')
    op.drop_column('accounts', 'created_by_id')
    op.drop_column('accounts', 'tax_code')
    op.drop_column('accounts', 'allows_transactions')
    op.add_column('audit_logs', sa.Column('description', sa.Text(), nullable=False, server_default='System action'))
    op.alter_column('audit_logs', 'user_id',
               existing_type=sa.UUID(),
               nullable=False)
    # Handle resource_id conversion to UUID with explicit USING clause
    op.execute("ALTER TABLE audit_logs ALTER COLUMN resource_id TYPE UUID USING resource_id::UUID")
    op.alter_column('audit_logs', 'user_agent',
               existing_type=sa.VARCHAR(length=500),
               type_=sa.Text(),
               existing_nullable=True)
    op.drop_index(op.f('ix_audit_logs_action'), table_name='audit_logs')
    op.drop_index(op.f('ix_audit_logs_resource_type'), table_name='audit_logs')
    op.drop_index(op.f('ix_audit_logs_user_id'), table_name='audit_logs')
    op.create_index(op.f('ix_audit_logs_id'), 'audit_logs', ['id'], unique=False)
    op.drop_constraint(op.f('fk_audit_logs_user_id_users'), 'audit_logs', type_='foreignkey')
    op.create_foreign_key(op.f('fk_audit_logs_user_id_users'), 'audit_logs', 'users', ['user_id'], ['id'])
    op.drop_column('audit_logs', 'new_values')
    op.drop_column('audit_logs', 'old_values')
    # Add new columns as nullable first, then we'll make them NOT NULL after setting values
    op.add_column('change_tracking', sa.Column('user_id', sa.UUID(), nullable=True))
    op.add_column('change_tracking', sa.Column('timestamp', sa.DateTime(timezone=True), nullable=True))
    # Handle record_id conversion to UUID with explicit USING clause
    op.execute("ALTER TABLE change_tracking ALTER COLUMN record_id TYPE UUID USING record_id::UUID")
    op.drop_index(op.f('ix_change_tracking_changed_at'), table_name='change_tracking')
    op.drop_index(op.f('ix_change_tracking_record_id'), table_name='change_tracking')
    op.drop_index(op.f('ix_change_tracking_table_name'), table_name='change_tracking')
    op.create_index(op.f('ix_change_tracking_id'), 'change_tracking', ['id'], unique=False)
    op.create_index(op.f('ix_change_tracking_timestamp'), 'change_tracking', ['timestamp'], unique=False)
    op.drop_constraint(op.f('fk_change_tracking_changed_by_id_users'), 'change_tracking', type_='foreignkey')
    op.create_foreign_key(op.f('fk_change_tracking_user_id_users'), 'change_tracking', 'users', ['user_id'], ['id'])
    op.drop_column('change_tracking', 'changed_at')
    op.drop_column('change_tracking', 'changed_by_id')
    op.add_column('company_info', sa.Column('legal_name', sa.String(length=200), nullable=True))
    op.add_column('company_info', sa.Column('city', sa.String(length=100), nullable=True))
    op.add_column('company_info', sa.Column('state', sa.String(length=100), nullable=True))
    op.add_column('company_info', sa.Column('postal_code', sa.String(length=20), nullable=True))
    op.add_column('company_info', sa.Column('country', sa.String(length=100), nullable=True))
    op.add_column('company_info', sa.Column('fiscal_year_start_month', sa.Integer(), nullable=False, server_default='1'))
    op.add_column('company_info', sa.Column('default_currency', sa.String(length=3), nullable=False, server_default='USD'))
    op.add_column('company_info', sa.Column('logo_path', sa.String(length=500), nullable=True))
    op.add_column('company_info', sa.Column('signature_path', sa.String(length=500), nullable=True))
    op.alter_column('company_info', 'tax_id',
               existing_type=sa.VARCHAR(length=50),
               nullable=True)
    op.alter_column('company_info', 'address',
               existing_type=sa.VARCHAR(length=500),
               type_=sa.Text(),
               existing_nullable=True)
    op.alter_column('company_info', 'phone',
               existing_type=sa.VARCHAR(length=20),
               type_=sa.String(length=50),
               existing_nullable=True)
    op.alter_column('company_info', 'email',
               existing_type=sa.VARCHAR(length=100),
               type_=sa.String(length=200),
               existing_nullable=True)
    op.create_index(op.f('ix_company_info_id'), 'company_info', ['id'], unique=False)
    op.drop_column('company_info', 'logo_url')
    op.drop_column('company_info', 'base_currency')
    op.drop_column('company_info', 'fiscal_year_start')
    op.add_column('journal_entries', sa.Column('posting_date', sa.DateTime(timezone=True), nullable=True))
    op.add_column('journal_entries', sa.Column('external_reference', sa.String(length=100), nullable=True))
    op.alter_column('journal_entries', 'description',
               existing_type=sa.VARCHAR(length=1000),
               type_=sa.Text(),
               existing_nullable=False)
    op.alter_column('journal_entries', 'entry_date',
               existing_type=sa.DATE(),
               type_=sa.DateTime(timezone=True),
               existing_nullable=False)
    op.alter_column('journal_entries', 'notes',
               existing_type=sa.VARCHAR(length=1000),
               type_=sa.Text(),
               existing_nullable=True)
    op.drop_index(op.f('ix_journal_entries_entry_date'), table_name='journal_entries')
    op.drop_index(op.f('ix_journal_entries_status'), table_name='journal_entries')
    op.drop_constraint(op.f('uq_journal_entries_number'), 'journal_entries', type_='unique')
    op.create_index(op.f('ix_journal_entries_id'), 'journal_entries', ['id'], unique=False)
    op.create_index(op.f('ix_journal_entries_number'), 'journal_entries', ['number'], unique=True)
    op.drop_column('journal_entries', 'cancel_reason')
    op.add_column('journal_entry_lines', sa.Column('third_party_id', sa.String(length=50), nullable=True))
    op.add_column('journal_entry_lines', sa.Column('cost_center_id', sa.String(length=50), nullable=True))
    op.alter_column('journal_entry_lines', 'description',
               existing_type=sa.VARCHAR(length=500),
               type_=sa.Text(),
               nullable=True)
    op.drop_index(op.f('ix_journal_entry_lines_account_id'), table_name='journal_entry_lines')
    op.drop_index(op.f('ix_journal_entry_lines_line_number'), table_name='journal_entry_lines')
    op.create_index(op.f('ix_journal_entry_lines_id'), 'journal_entry_lines', ['id'], unique=False)
    op.drop_constraint(op.f('fk_journal_entry_lines_journal_entry_id_journal_entries'), 'journal_entry_lines', type_='foreignkey')
    op.create_foreign_key(op.f('fk_journal_entry_lines_journal_entry_id_journal_entries'), 'journal_entry_lines', 'journal_entries', ['journal_entry_id'], ['id'])
    op.drop_column('journal_entry_lines', 'cost_center')
    op.drop_column('journal_entry_lines', 'third_party')
    op.add_column('system_configuration', sa.Column('is_user_editable', sa.Boolean(), nullable=False, server_default='true'))
    op.add_column('system_configuration', sa.Column('modified_by_id', sa.UUID(), nullable=True))
    # Handle value conversion to JSON with explicit USING clause
    op.execute("ALTER TABLE system_configuration ALTER COLUMN value TYPE JSON USING value::JSON")
    op.alter_column('system_configuration', 'description',
               existing_type=sa.VARCHAR(length=500),
               type_=sa.Text(),
               existing_nullable=True)
    op.alter_column('system_configuration', 'category',
               existing_type=sa.VARCHAR(length=50),
               nullable=False)
    op.drop_constraint(op.f('uq_system_configuration_key'), 'system_configuration', type_='unique')
    op.create_index(op.f('ix_system_configuration_id'), 'system_configuration', ['id'], unique=False)
    op.create_index(op.f('ix_system_configuration_key'), 'system_configuration', ['key'], unique=True)
    op.create_foreign_key(op.f('fk_system_configuration_modified_by_id_users'), 'system_configuration', 'users', ['modified_by_id'], ['id'])
    op.drop_column('system_configuration', 'is_encrypted')
    op.drop_column('system_configuration', 'data_type')
    op.add_column('user_sessions', sa.Column('token_jti', sa.String(length=255), nullable=False, server_default='temp_token'))
    op.alter_column('user_sessions', 'user_agent',
               existing_type=sa.VARCHAR(length=500),
               type_=sa.Text(),
               existing_nullable=True)
    op.drop_index(op.f('ix_users_sessions_expires_at'), table_name='user_sessions')
    op.drop_constraint(op.f('uq_user_sessions_session_token'), 'user_sessions', type_='unique')
    op.create_index(op.f('ix_user_sessions_id'), 'user_sessions', ['id'], unique=False)
    op.create_unique_constraint(op.f('uq_user_sessions_token_jti'), 'user_sessions', ['token_jti'])
    op.drop_constraint(op.f('fk_user_sessions_user_id_users'), 'user_sessions', type_='foreignkey')
    op.create_foreign_key(op.f('fk_user_sessions_user_id_users'), 'user_sessions', 'users', ['user_id'], ['id'])
    op.drop_column('user_sessions', 'is_active')
    op.drop_column('user_sessions', 'session_token')
    op.add_column('users', sa.Column('full_name', sa.String(length=100), nullable=False, server_default='Unknown User'))
    op.add_column('users', sa.Column('is_superuser', sa.Boolean(), nullable=False, server_default='false'))
    op.add_column('users', sa.Column('created_by_id', sa.UUID(), nullable=True))
    op.add_column('users', sa.Column('force_password_change', sa.Boolean(), nullable=False, server_default='false'))
    op.add_column('users', sa.Column('login_attempts', sa.Integer(), nullable=False, server_default='0'))
    op.add_column('users', sa.Column('notes', sa.Text(), nullable=True))
    
    # Update full_name from existing first_name and last_name before dropping them
    op.execute("UPDATE users SET full_name = COALESCE(first_name || ' ' || last_name, first_name, last_name, 'Unknown User') WHERE first_name IS NOT NULL OR last_name IS NOT NULL")
    op.alter_column('users', 'password_changed_at',
               existing_type=postgresql.TIMESTAMP(timezone=True),
               nullable=False)
    op.drop_index(op.f('ix_users_role'), table_name='users')
    op.drop_constraint(op.f('uq_users_email'), 'users', type_='unique')
    op.drop_constraint(op.f('uq_users_employee_id'), 'users', type_='unique')
    op.drop_index(op.f('ix_users_email'), table_name='users')
    op.create_index(op.f('ix_users_email'), 'users', ['email'], unique=True)
    op.create_index(op.f('ix_users_id'), 'users', ['id'], unique=False)
    op.create_foreign_key(op.f('fk_users_created_by_id_users'), 'users', 'users', ['created_by_id'], ['id'])
    op.drop_column('users', 'failed_login_attempts')
    op.drop_column('users', 'must_change_password')
    op.drop_column('users', 'phone')
    op.drop_column('users', 'first_name')
    op.drop_column('users', 'last_name')
    op.drop_column('users', 'department')
    op.drop_column('users', 'employee_id')
    # ### end Alembic commands ###


def downgrade() -> None:
    """Downgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    op.add_column('users', sa.Column('employee_id', sa.VARCHAR(length=50), autoincrement=False, nullable=True))
    op.add_column('users', sa.Column('department', sa.VARCHAR(length=100), autoincrement=False, nullable=True))
    op.add_column('users', sa.Column('last_name', sa.VARCHAR(length=100), autoincrement=False, nullable=False))
    op.add_column('users', sa.Column('first_name', sa.VARCHAR(length=100), autoincrement=False, nullable=False))
    op.add_column('users', sa.Column('phone', sa.VARCHAR(length=20), autoincrement=False, nullable=True))
    op.add_column('users', sa.Column('must_change_password', sa.BOOLEAN(), autoincrement=False, nullable=False))
    op.add_column('users', sa.Column('failed_login_attempts', sa.INTEGER(), autoincrement=False, nullable=False))
    op.drop_constraint(op.f('fk_users_created_by_id_users'), 'users', type_='foreignkey')
    op.drop_index(op.f('ix_users_id'), table_name='users')
    op.drop_index(op.f('ix_users_email'), table_name='users')
    op.create_index(op.f('ix_users_email'), 'users', ['email'], unique=False)
    op.create_unique_constraint(op.f('uq_users_employee_id'), 'users', ['employee_id'], postgresql_nulls_not_distinct=False)
    op.create_unique_constraint(op.f('uq_users_email'), 'users', ['email'], postgresql_nulls_not_distinct=False)
    op.create_index(op.f('ix_users_role'), 'users', ['role'], unique=False)
    op.alter_column('users', 'password_changed_at',
               existing_type=postgresql.TIMESTAMP(timezone=True),
               nullable=True)
    op.drop_column('users', 'notes')
    op.drop_column('users', 'login_attempts')
    op.drop_column('users', 'force_password_change')
    op.drop_column('users', 'created_by_id')
    op.drop_column('users', 'is_superuser')
    op.drop_column('users', 'full_name')
    op.add_column('user_sessions', sa.Column('session_token', sa.VARCHAR(), autoincrement=False, nullable=False))
    op.add_column('user_sessions', sa.Column('is_active', sa.BOOLEAN(), autoincrement=False, nullable=False))
    op.drop_constraint(op.f('fk_user_sessions_user_id_users'), 'user_sessions', type_='foreignkey')
    op.create_foreign_key(op.f('fk_user_sessions_user_id_users'), 'user_sessions', 'users', ['user_id'], ['id'], ondelete='CASCADE')
    op.drop_constraint(op.f('uq_user_sessions_token_jti'), 'user_sessions', type_='unique')
    op.drop_index(op.f('ix_user_sessions_id'), table_name='user_sessions')
    op.create_unique_constraint(op.f('uq_user_sessions_session_token'), 'user_sessions', ['session_token'], postgresql_nulls_not_distinct=False)
    op.create_index(op.f('ix_users_sessions_expires_at'), 'user_sessions', ['expires_at'], unique=False)
    op.alter_column('user_sessions', 'user_agent',
               existing_type=sa.Text(),
               type_=sa.VARCHAR(length=500),
               existing_nullable=True)
    op.drop_column('user_sessions', 'token_jti')
    op.add_column('system_configuration', sa.Column('data_type', sa.VARCHAR(length=20), autoincrement=False, nullable=False))
    op.add_column('system_configuration', sa.Column('is_encrypted', sa.BOOLEAN(), autoincrement=False, nullable=False))
    op.drop_constraint(op.f('fk_system_configuration_modified_by_id_users'), 'system_configuration', type_='foreignkey')
    op.drop_index(op.f('ix_system_configuration_key'), table_name='system_configuration')
    op.drop_index(op.f('ix_system_configuration_id'), table_name='system_configuration')
    op.create_unique_constraint(op.f('uq_system_configuration_key'), 'system_configuration', ['key'], postgresql_nulls_not_distinct=False)
    op.alter_column('system_configuration', 'category',
               existing_type=sa.VARCHAR(length=50),
               nullable=True)
    op.alter_column('system_configuration', 'description',
               existing_type=sa.Text(),
               type_=sa.VARCHAR(length=500),
               existing_nullable=True)
    op.alter_column('system_configuration', 'value',
               existing_type=sa.JSON(),
               type_=sa.TEXT(),
               existing_nullable=False)
    op.drop_column('system_configuration', 'modified_by_id')
    op.drop_column('system_configuration', 'is_user_editable')
    op.add_column('journal_entry_lines', sa.Column('third_party', sa.VARCHAR(length=100), autoincrement=False, nullable=True))
    op.add_column('journal_entry_lines', sa.Column('cost_center', sa.VARCHAR(length=50), autoincrement=False, nullable=True))
    op.drop_constraint(op.f('fk_journal_entry_lines_journal_entry_id_journal_entries'), 'journal_entry_lines', type_='foreignkey')
    op.create_foreign_key(op.f('fk_journal_entry_lines_journal_entry_id_journal_entries'), 'journal_entry_lines', 'journal_entries', ['journal_entry_id'], ['id'], ondelete='CASCADE')
    op.drop_index(op.f('ix_journal_entry_lines_id'), table_name='journal_entry_lines')
    op.create_index(op.f('ix_journal_entry_lines_line_number'), 'journal_entry_lines', ['line_number'], unique=False)
    op.create_index(op.f('ix_journal_entry_lines_account_id'), 'journal_entry_lines', ['account_id'], unique=False)
    op.alter_column('journal_entry_lines', 'description',
               existing_type=sa.Text(),
               type_=sa.VARCHAR(length=500),
               nullable=False)
    op.drop_column('journal_entry_lines', 'cost_center_id')
    op.drop_column('journal_entry_lines', 'third_party_id')
    op.add_column('journal_entries', sa.Column('cancel_reason', sa.VARCHAR(length=500), autoincrement=False, nullable=True))
    op.drop_index(op.f('ix_journal_entries_number'), table_name='journal_entries')
    op.drop_index(op.f('ix_journal_entries_id'), table_name='journal_entries')
    op.create_unique_constraint(op.f('uq_journal_entries_number'), 'journal_entries', ['number'], postgresql_nulls_not_distinct=False)
    op.create_index(op.f('ix_journal_entries_status'), 'journal_entries', ['status'], unique=False)
    op.create_index(op.f('ix_journal_entries_entry_date'), 'journal_entries', ['entry_date'], unique=False)
    op.alter_column('journal_entries', 'notes',
               existing_type=sa.Text(),
               type_=sa.VARCHAR(length=1000),
               existing_nullable=True)
    op.alter_column('journal_entries', 'entry_date',
               existing_type=sa.DateTime(timezone=True),
               type_=sa.DATE(),
               existing_nullable=False)
    op.alter_column('journal_entries', 'description',
               existing_type=sa.Text(),
               type_=sa.VARCHAR(length=1000),
               existing_nullable=False)
    op.drop_column('journal_entries', 'external_reference')
    op.drop_column('journal_entries', 'posting_date')
    op.add_column('company_info', sa.Column('fiscal_year_start', sa.DATE(), autoincrement=False, nullable=False))
    op.add_column('company_info', sa.Column('base_currency', sa.VARCHAR(length=3), autoincrement=False, nullable=False))
    op.add_column('company_info', sa.Column('logo_url', sa.VARCHAR(length=500), autoincrement=False, nullable=True))
    op.drop_index(op.f('ix_company_info_id'), table_name='company_info')
    op.alter_column('company_info', 'email',
               existing_type=sa.String(length=200),
               type_=sa.VARCHAR(length=100),
               existing_nullable=True)
    op.alter_column('company_info', 'phone',
               existing_type=sa.String(length=50),
               type_=sa.VARCHAR(length=20),
               existing_nullable=True)
    op.alter_column('company_info', 'address',
               existing_type=sa.Text(),
               type_=sa.VARCHAR(length=500),
               existing_nullable=True)
    op.alter_column('company_info', 'tax_id',
               existing_type=sa.VARCHAR(length=50),
               nullable=False)
    op.drop_column('company_info', 'signature_path')
    op.drop_column('company_info', 'logo_path')
    op.drop_column('company_info', 'default_currency')
    op.drop_column('company_info', 'fiscal_year_start_month')
    op.drop_column('company_info', 'country')
    op.drop_column('company_info', 'postal_code')
    op.drop_column('company_info', 'state')
    op.drop_column('company_info', 'city')
    op.drop_column('company_info', 'legal_name')
    op.add_column('change_tracking', sa.Column('changed_by_id', sa.UUID(), autoincrement=False, nullable=False))
    op.add_column('change_tracking', sa.Column('changed_at', postgresql.TIMESTAMP(timezone=True), autoincrement=False, nullable=False))
    op.drop_constraint(op.f('fk_change_tracking_user_id_users'), 'change_tracking', type_='foreignkey')
    op.create_foreign_key(op.f('fk_change_tracking_changed_by_id_users'), 'change_tracking', 'users', ['changed_by_id'], ['id'])
    op.drop_index(op.f('ix_change_tracking_timestamp'), table_name='change_tracking')
    op.drop_index(op.f('ix_change_tracking_id'), table_name='change_tracking')
    op.create_index(op.f('ix_change_tracking_table_name'), 'change_tracking', ['table_name'], unique=False)
    op.create_index(op.f('ix_change_tracking_record_id'), 'change_tracking', ['record_id'], unique=False)
    op.create_index(op.f('ix_change_tracking_changed_at'), 'change_tracking', ['changed_at'], unique=False)
    op.alter_column('change_tracking', 'record_id',
               existing_type=sa.UUID(),
               type_=sa.VARCHAR(length=100),
               existing_nullable=False)
    op.drop_column('change_tracking', 'timestamp')
    op.drop_column('change_tracking', 'user_id')
    op.add_column('audit_logs', sa.Column('old_values', postgresql.JSON(astext_type=sa.Text()), autoincrement=False, nullable=True))
    op.add_column('audit_logs', sa.Column('new_values', postgresql.JSON(astext_type=sa.Text()), autoincrement=False, nullable=True))
    op.drop_constraint(op.f('fk_audit_logs_user_id_users'), 'audit_logs', type_='foreignkey')
    op.create_foreign_key(op.f('fk_audit_logs_user_id_users'), 'audit_logs', 'users', ['user_id'], ['id'], ondelete='SET NULL')
    op.drop_index(op.f('ix_audit_logs_id'), table_name='audit_logs')
    op.create_index(op.f('ix_audit_logs_user_id'), 'audit_logs', ['user_id'], unique=False)
    op.create_index(op.f('ix_audit_logs_resource_type'), 'audit_logs', ['resource_type'], unique=False)
    op.create_index(op.f('ix_audit_logs_action'), 'audit_logs', ['action'], unique=False)
    op.alter_column('audit_logs', 'user_agent',
               existing_type=sa.Text(),
               type_=sa.VARCHAR(length=500),
               existing_nullable=True)
    op.alter_column('audit_logs', 'resource_id',
               existing_type=sa.UUID(),
               type_=sa.VARCHAR(length=100),
               existing_nullable=True)
    op.alter_column('audit_logs', 'user_id',
               existing_type=sa.UUID(),
               nullable=True)
    op.drop_column('audit_logs', 'description')
    op.add_column('accounts', sa.Column('allows_transactions', sa.BOOLEAN(), autoincrement=False, nullable=False))
    op.add_column('accounts', sa.Column('tax_code', sa.VARCHAR(length=20), autoincrement=False, nullable=True))
    op.add_column('accounts', sa.Column('created_by_id', sa.UUID(), autoincrement=False, nullable=False))
    op.create_foreign_key(op.f('fk_accounts_created_by_id_users'), 'accounts', 'users', ['created_by_id'], ['id'])
    op.drop_index(op.f('ix_accounts_parent_id'), table_name='accounts')
    op.drop_index(op.f('ix_accounts_id'), table_name='accounts')
    op.drop_index(op.f('ix_accounts_code'), table_name='accounts')
    op.create_index(op.f('ix_accounts_code'), 'accounts', ['code'], unique=False)
    op.create_unique_constraint(op.f('uq_accounts_code'), 'accounts', ['code'], postgresql_nulls_not_distinct=False)
    op.create_index(op.f('ix_accounts_level'), 'accounts', ['level'], unique=False)
    op.create_index(op.f('ix_accounts_account_type'), 'accounts', ['account_type'], unique=False)
    op.alter_column('accounts', 'category',
               existing_type=postgresql.ENUM('CURRENT_ASSET', 'NON_CURRENT_ASSET', 'CURRENT_LIABILITY', 'NON_CURRENT_LIABILITY', 'CAPITAL', 'RETAINED_EARNINGS', 'OPERATING_REVENUE', 'NON_OPERATING_REVENUE', 'OPERATING_EXPENSE', 'NON_OPERATING_EXPENSE', name='accountcategory'),
               nullable=False)
    op.alter_column('accounts', 'description',
               existing_type=sa.Text(),
               type_=sa.VARCHAR(length=500),
               existing_nullable=True)
    op.drop_column('accounts', 'notes')
    op.drop_column('accounts', 'credit_balance')
    op.drop_column('accounts', 'debit_balance')
    op.drop_column('accounts', 'balance')
    op.drop_column('accounts', 'requires_cost_center')
    op.drop_column('accounts', 'requires_third_party')
    op.drop_column('accounts', 'allows_movements')
    op.create_table('number_sequence',
    sa.Column('id', sa.UUID(), autoincrement=False, nullable=False),
    sa.Column('sequence_name', sa.VARCHAR(length=50), autoincrement=False, nullable=False),
    sa.Column('prefix', sa.VARCHAR(length=10), autoincrement=False, nullable=True),
    sa.Column('current_number', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('increment_by', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('padding_length', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('reset_period', sa.VARCHAR(length=20), autoincrement=False, nullable=True),
    sa.Column('last_reset_date', sa.DATE(), autoincrement=False, nullable=True),
    sa.Column('is_active', sa.BOOLEAN(), autoincrement=False, nullable=False),
    sa.Column('created_at', postgresql.TIMESTAMP(timezone=True), autoincrement=False, nullable=False),
    sa.Column('updated_at', postgresql.TIMESTAMP(timezone=True), autoincrement=False, nullable=False),
    sa.PrimaryKeyConstraint('id', name=op.f('pk_number_sequence')),
    sa.UniqueConstraint('sequence_name', name=op.f('uq_number_sequence_sequence_name'), postgresql_include=[], postgresql_nulls_not_distinct=False)
    )
    # ### end Alembic commands ###
