"""Initial migration

Revision ID: a7a33b0d5323
Revises: 
Create Date: 2025-07-04 18:56:52.697380

"""
from typing import Sequence, Union

from alembic import op
import sqlalchemy as sa


# revision identifiers, used by Alembic.
revision: str = 'a7a33b0d5323'
down_revision: Union[str, None] = None
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    """Upgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table('company_info',
    sa.Column('name', sa.String(length=200), nullable=False),
    sa.Column('legal_name', sa.String(length=200), nullable=True),
    sa.Column('tax_id', sa.String(length=50), nullable=True),
    sa.Column('address', sa.Text(), nullable=True),
    sa.Column('city', sa.String(length=100), nullable=True),
    sa.Column('state', sa.String(length=100), nullable=True),
    sa.Column('postal_code', sa.String(length=20), nullable=True),
    sa.Column('country', sa.String(length=100), nullable=True),
    sa.Column('phone', sa.String(length=50), nullable=True),
    sa.Column('email', sa.String(length=200), nullable=True),
    sa.Column('website', sa.String(length=200), nullable=True),
    sa.Column('fiscal_year_start_month', sa.Integer(), nullable=False),
    sa.Column('default_currency', sa.String(length=3), nullable=False),
    sa.Column('logo_path', sa.String(length=500), nullable=True),
    sa.Column('signature_path', sa.String(length=500), nullable=True),
    sa.Column('extra_data', sa.JSON(), nullable=True),
    sa.Column('is_active', sa.Boolean(), nullable=False),
    sa.Column('id', sa.UUID(), nullable=False),
    sa.Column('created_at', sa.DateTime(timezone=True), nullable=False),
    sa.Column('updated_at', sa.DateTime(timezone=True), nullable=False),
    sa.PrimaryKeyConstraint('id', name=op.f('pk_company_info'))
    )
    op.create_index(op.f('ix_company_info_id'), 'company_info', ['id'], unique=False)
    op.create_table('cost_centers',
    sa.Column('code', sa.String(length=20), nullable=False),
    sa.Column('name', sa.String(length=200), nullable=False),
    sa.Column('description', sa.Text(), nullable=True),
    sa.Column('parent_id', sa.UUID(), nullable=True),
    sa.Column('is_active', sa.Boolean(), nullable=False),
    sa.Column('allows_direct_assignment', sa.Boolean(), nullable=False, comment='Si permite asignaci√≥n directa de transacciones o solo es agrupador'),
    sa.Column('manager_name', sa.String(length=200), nullable=True),
    sa.Column('budget_code', sa.String(length=50), nullable=True),
    sa.Column('notes', sa.Text(), nullable=True),
    sa.Column('id', sa.UUID(), nullable=False),
    sa.Column('created_at', sa.DateTime(timezone=True), nullable=False),
    sa.Column('updated_at', sa.DateTime(timezone=True), nullable=False),
    sa.ForeignKeyConstraint(['parent_id'], ['cost_centers.id'], name=op.f('fk_cost_centers_parent_id_cost_centers')),
    sa.PrimaryKeyConstraint('id', name=op.f('pk_cost_centers'))
    )
    op.create_index(op.f('ix_cost_centers_code'), 'cost_centers', ['code'], unique=True)
    op.create_index(op.f('ix_cost_centers_id'), 'cost_centers', ['id'], unique=False)
    op.create_index(op.f('ix_cost_centers_name'), 'cost_centers', ['name'], unique=True)
    op.create_table('number_sequences',
    sa.Column('sequence_type', sa.String(length=50), nullable=False),
    sa.Column('prefix', sa.String(length=10), nullable=True),
    sa.Column('suffix', sa.String(length=10), nullable=True),
    sa.Column('current_number', sa.Integer(), nullable=False),
    sa.Column('increment', sa.Integer(), nullable=False),
    sa.Column('min_digits', sa.Integer(), nullable=False),
    sa.Column('reset_annually', sa.Boolean(), nullable=False),
    sa.Column('reset_monthly', sa.Boolean(), nullable=False),
    sa.Column('last_reset_date', sa.DateTime(timezone=True), nullable=True),
    sa.Column('is_active', sa.Boolean(), nullable=False),
    sa.Column('id', sa.UUID(), nullable=False),
    sa.Column('created_at', sa.DateTime(timezone=True), nullable=False),
    sa.Column('updated_at', sa.DateTime(timezone=True), nullable=False),
    sa.PrimaryKeyConstraint('id', name=op.f('pk_number_sequences'))
    )
    op.create_index(op.f('ix_number_sequences_id'), 'number_sequences', ['id'], unique=False)
    op.create_index(op.f('ix_number_sequences_sequence_type'), 'number_sequences', ['sequence_type'], unique=True)
    op.create_table('payment_terms',
    sa.Column('code', sa.String(length=20), nullable=False),
    sa.Column('name', sa.String(length=100), nullable=False),
    sa.Column('description', sa.Text(), nullable=True),
    sa.Column('is_active', sa.Boolean(), nullable=False),
    sa.Column('notes', sa.Text(), nullable=True),
    sa.Column('id', sa.UUID(), nullable=False),
    sa.Column('created_at', sa.DateTime(timezone=True), nullable=False),
    sa.Column('updated_at', sa.DateTime(timezone=True), nullable=False),
    sa.PrimaryKeyConstraint('id', name=op.f('pk_payment_terms'))
    )
    op.create_index(op.f('ix_payment_terms_code'), 'payment_terms', ['code'], unique=True)
    op.create_index(op.f('ix_payment_terms_id'), 'payment_terms', ['id'], unique=False)
    op.create_table('users',
    sa.Column('email', sa.String(length=255), nullable=False),
    sa.Column('full_name', sa.String(length=100), nullable=False),
    sa.Column('hashed_password', sa.String(length=255), nullable=False),
    sa.Column('is_active', sa.Boolean(), nullable=False),
    sa.Column('is_superuser', sa.Boolean(), nullable=False),
    sa.Column('is_verified', sa.Boolean(), nullable=False),
    sa.Column('role', sa.Enum('ADMIN', 'CONTADOR', 'SOLO_LECTURA', name='userrole'), nullable=False),
    sa.Column('last_login', sa.DateTime(timezone=True), nullable=True),
    sa.Column('password_changed_at', sa.DateTime(timezone=True), nullable=False),
    sa.Column('created_by_id', sa.UUID(), nullable=True),
    sa.Column('force_password_change', sa.Boolean(), nullable=False),
    sa.Column('login_attempts', sa.Integer(), nullable=False),
    sa.Column('locked_until', sa.DateTime(timezone=True), nullable=True),
    sa.Column('notes', sa.Text(), nullable=True),
    sa.Column('id', sa.UUID(), nullable=False),
    sa.Column('created_at', sa.DateTime(timezone=True), nullable=False),
    sa.Column('updated_at', sa.DateTime(timezone=True), nullable=False),
    sa.ForeignKeyConstraint(['created_by_id'], ['users.id'], name=op.f('fk_users_created_by_id_users')),
    sa.PrimaryKeyConstraint('id', name=op.f('pk_users'))
    )
    op.create_index(op.f('ix_users_email'), 'users', ['email'], unique=True)
    op.create_index(op.f('ix_users_id'), 'users', ['id'], unique=False)
    op.create_table('accounts',
    sa.Column('code', sa.String(length=20), nullable=False),
    sa.Column('name', sa.String(length=200), nullable=False),
    sa.Column('description', sa.Text(), nullable=True),
    sa.Column('account_type', sa.Enum('ASSET', 'LIABILITY', 'EQUITY', 'INCOME', 'EXPENSE', 'COST', name='accounttype'), nullable=False),
    sa.Column('category', sa.Enum('CURRENT_ASSET', 'NON_CURRENT_ASSET', 'CURRENT_LIABILITY', 'NON_CURRENT_LIABILITY', 'CAPITAL', 'RESERVES', 'RETAINED_EARNINGS', 'OPERATING_INCOME', 'NON_OPERATING_INCOME', 'OPERATING_EXPENSE', 'NON_OPERATING_EXPENSE', 'COST_OF_SALES', 'PRODUCTION_COSTS', 'TAXES', name='accountcategory'), nullable=True),
    sa.Column('cash_flow_category', sa.Enum('OPERATING', 'INVESTING', 'FINANCING', 'CASH_EQUIVALENTS', name='cashflowcategory'), nullable=True),
    sa.Column('parent_id', sa.UUID(), nullable=True),
    sa.Column('level', sa.Integer(), nullable=False),
    sa.Column('is_active', sa.Boolean(), nullable=False),
    sa.Column('allows_movements', sa.Boolean(), nullable=False),
    sa.Column('requires_third_party', sa.Boolean(), nullable=False),
    sa.Column('requires_cost_center', sa.Boolean(), nullable=False),
    sa.Column('allows_reconciliation', sa.Boolean(), nullable=False),
    sa.Column('balance', sa.Numeric(precision=15, scale=2), nullable=False),
    sa.Column('debit_balance', sa.Numeric(precision=15, scale=2), nullable=False),
    sa.Column('credit_balance', sa.Numeric(precision=15, scale=2), nullable=False),
    sa.Column('notes', sa.Text(), nullable=True),
    sa.Column('created_by_id', sa.UUID(), nullable=True),
    sa.Column('id', sa.UUID(), nullable=False),
    sa.Column('created_at', sa.DateTime(timezone=True), nullable=False),
    sa.Column('updated_at', sa.DateTime(timezone=True), nullable=False),
    sa.ForeignKeyConstraint(['created_by_id'], ['users.id'], name=op.f('fk_accounts_created_by_id_users')),
    sa.ForeignKeyConstraint(['parent_id'], ['accounts.id'], name=op.f('fk_accounts_parent_id_accounts')),
    sa.PrimaryKeyConstraint('id', name=op.f('pk_accounts'))
    )
    op.create_index(op.f('ix_accounts_code'), 'accounts', ['code'], unique=True)
    op.create_index(op.f('ix_accounts_id'), 'accounts', ['id'], unique=False)
    op.create_index(op.f('ix_accounts_parent_id'), 'accounts', ['parent_id'], unique=False)
    op.create_table('audit_logs',
    sa.Column('user_id', sa.UUID(), nullable=False),
    sa.Column('action', sa.Enum('CREATE', 'UPDATE', 'DELETE', 'VIEW', 'LOGIN', 'LOGOUT', 'POST_ENTRY', 'CANCEL_ENTRY', 'APPROVE_ENTRY', 'EXPORT_REPORT', name='auditaction'), nullable=False),
    sa.Column('resource_type', sa.String(length=100), nullable=False),
    sa.Column('resource_id', sa.UUID(), nullable=True),
    sa.Column('description', sa.Text(), nullable=False),
    sa.Column('level', sa.Enum('INFO', 'WARNING', 'ERROR', 'CRITICAL', name='auditloglevel'), nullable=False),
    sa.Column('ip_address', sa.String(length=45), nullable=True),
    sa.Column('user_agent', sa.Text(), nullable=True),
    sa.Column('extra_data', sa.JSON(), nullable=True),
    sa.Column('timestamp', sa.DateTime(timezone=True), nullable=False),
    sa.Column('id', sa.UUID(), nullable=False),
    sa.Column('created_at', sa.DateTime(timezone=True), nullable=False),
    sa.Column('updated_at', sa.DateTime(timezone=True), nullable=False),
    sa.ForeignKeyConstraint(['user_id'], ['users.id'], name=op.f('fk_audit_logs_user_id_users')),
    sa.PrimaryKeyConstraint('id', name=op.f('pk_audit_logs'))
    )
    op.create_index(op.f('ix_audit_logs_id'), 'audit_logs', ['id'], unique=False)
    op.create_index(op.f('ix_audit_logs_timestamp'), 'audit_logs', ['timestamp'], unique=False)
    op.create_table('change_tracking',
    sa.Column('table_name', sa.String(length=100), nullable=False),
    sa.Column('record_id', sa.UUID(), nullable=False),
    sa.Column('field_name', sa.String(length=100), nullable=False),
    sa.Column('old_value', sa.Text(), nullable=True),
    sa.Column('new_value', sa.Text(), nullable=True),
    sa.Column('change_type', sa.String(length=20), nullable=False),
    sa.Column('user_id', sa.UUID(), nullable=False),
    sa.Column('timestamp', sa.DateTime(timezone=True), nullable=False),
    sa.Column('id', sa.UUID(), nullable=False),
    sa.Column('created_at', sa.DateTime(timezone=True), nullable=False),
    sa.Column('updated_at', sa.DateTime(timezone=True), nullable=False),
    sa.ForeignKeyConstraint(['user_id'], ['users.id'], name=op.f('fk_change_tracking_user_id_users')),
    sa.PrimaryKeyConstraint('id', name=op.f('pk_change_tracking'))
    )
    op.create_index(op.f('ix_change_tracking_id'), 'change_tracking', ['id'], unique=False)
    op.create_index(op.f('ix_change_tracking_timestamp'), 'change_tracking', ['timestamp'], unique=False)
    op.create_table('payment_schedules',
    sa.Column('payment_terms_id', sa.UUID(), nullable=False),
    sa.Column('sequence', sa.Integer(), nullable=False),
    sa.Column('days', sa.Integer(), nullable=False),
    sa.Column('percentage', sa.Numeric(precision=11, scale=6), nullable=False),
    sa.Column('description', sa.String(length=200), nullable=True),
    sa.Column('id', sa.UUID(), nullable=False),
    sa.Column('created_at', sa.DateTime(timezone=True), nullable=False),
    sa.Column('updated_at', sa.DateTime(timezone=True), nullable=False),
    sa.ForeignKeyConstraint(['payment_terms_id'], ['payment_terms.id'], name=op.f('fk_payment_schedules_payment_terms_id_payment_terms')),
    sa.PrimaryKeyConstraint('id', name=op.f('pk_payment_schedules'))
    )
    op.create_index(op.f('ix_payment_schedules_id'), 'payment_schedules', ['id'], unique=False)
    op.create_table('system_configuration',
    sa.Column('key', sa.String(length=100), nullable=False),
    sa.Column('value', sa.JSON(), nullable=False),
    sa.Column('description', sa.Text(), nullable=True),
    sa.Column('category', sa.String(length=50), nullable=False),
    sa.Column('is_user_editable', sa.Boolean(), nullable=False),
    sa.Column('modified_by_id', sa.UUID(), nullable=True),
    sa.Column('id', sa.UUID(), nullable=False),
    sa.Column('created_at', sa.DateTime(timezone=True), nullable=False),
    sa.Column('updated_at', sa.DateTime(timezone=True), nullable=False),
    sa.ForeignKeyConstraint(['modified_by_id'], ['users.id'], name=op.f('fk_system_configuration_modified_by_id_users')),
    sa.PrimaryKeyConstraint('id', name=op.f('pk_system_configuration'))
    )
    op.create_index(op.f('ix_system_configuration_category'), 'system_configuration', ['category'], unique=False)
    op.create_index(op.f('ix_system_configuration_id'), 'system_configuration', ['id'], unique=False)
    op.create_index(op.f('ix_system_configuration_key'), 'system_configuration', ['key'], unique=True)
    op.create_table('user_sessions',
    sa.Column('user_id', sa.UUID(), nullable=False),
    sa.Column('token_jti', sa.String(length=255), nullable=False),
    sa.Column('expires_at', sa.DateTime(timezone=True), nullable=False),
    sa.Column('ip_address', sa.String(length=45), nullable=True),
    sa.Column('user_agent', sa.Text(), nullable=True),
    sa.Column('id', sa.UUID(), nullable=False),
    sa.Column('created_at', sa.DateTime(timezone=True), nullable=False),
    sa.Column('updated_at', sa.DateTime(timezone=True), nullable=False),
    sa.ForeignKeyConstraint(['user_id'], ['users.id'], name=op.f('fk_user_sessions_user_id_users')),
    sa.PrimaryKeyConstraint('id', name=op.f('pk_user_sessions')),
    sa.UniqueConstraint('token_jti', name=op.f('uq_user_sessions_token_jti'))
    )
    op.create_index(op.f('ix_user_sessions_id'), 'user_sessions', ['id'], unique=False)
    op.create_table('bank_extracts',
    sa.Column('name', sa.String(length=100), nullable=False),
    sa.Column('reference', sa.String(length=100), nullable=True),
    sa.Column('account_id', sa.UUID(), nullable=False),
    sa.Column('statement_date', sa.Date(), nullable=False),
    sa.Column('start_date', sa.Date(), nullable=False),
    sa.Column('end_date', sa.Date(), nullable=False),
    sa.Column('starting_balance', sa.Numeric(precision=15, scale=2), nullable=False),
    sa.Column('ending_balance', sa.Numeric(precision=15, scale=2), nullable=False),
    sa.Column('status', sa.Enum('IMPORTED', 'PROCESSING', 'RECONCILED', 'CLOSED', name='bankextractstatus'), nullable=False),
    sa.Column('file_name', sa.String(length=255), nullable=True),
    sa.Column('file_hash', sa.String(length=64), nullable=True, comment='Hash MD5 del archivo para evitar duplicados'),
    sa.Column('currency_code', sa.String(length=3), nullable=False),
    sa.Column('description', sa.Text(), nullable=True),
    sa.Column('notes', sa.Text(), nullable=True),
    sa.Column('created_by_id', sa.UUID(), nullable=False),
    sa.Column('imported_at', sa.DateTime(timezone=True), nullable=False),
    sa.Column('reconciled_by_id', sa.UUID(), nullable=True),
    sa.Column('reconciled_at', sa.DateTime(timezone=True), nullable=True),
    sa.Column('id', sa.UUID(), nullable=False),
    sa.Column('created_at', sa.DateTime(timezone=True), nullable=False),
    sa.Column('updated_at', sa.DateTime(timezone=True), nullable=False),
    sa.ForeignKeyConstraint(['account_id'], ['accounts.id'], name=op.f('fk_bank_extracts_account_id_accounts')),
    sa.ForeignKeyConstraint(['created_by_id'], ['users.id'], name=op.f('fk_bank_extracts_created_by_id_users')),
    sa.ForeignKeyConstraint(['reconciled_by_id'], ['users.id'], name=op.f('fk_bank_extracts_reconciled_by_id_users')),
    sa.PrimaryKeyConstraint('id', name=op.f('pk_bank_extracts'))
    )
    op.create_index(op.f('ix_bank_extracts_account_id'), 'bank_extracts', ['account_id'], unique=False)
    op.create_index(op.f('ix_bank_extracts_id'), 'bank_extracts', ['id'], unique=False)
    op.create_table('journals',
    sa.Column('name', sa.String(length=100), nullable=False, comment='Nombre descriptivo del diario'),
    sa.Column('code', sa.String(length=10), nullable=False, comment='C√≥digo √∫nico del diario'),
    sa.Column('type', sa.Enum('SALE', 'PURCHASE', 'CASH', 'BANK', 'MISCELLANEOUS', name='journaltype'), nullable=False, comment='Tipo de diario (sale, purchase, cash, bank, miscellaneous)'),
    sa.Column('sequence_prefix', sa.String(length=10), nullable=False, comment='Prefijo √∫nico para la secuencia de numeraci√≥n'),
    sa.Column('default_account_id', sa.UUID(), nullable=True, comment='Cuenta contable por defecto para asientos de este diario'),
    sa.Column('current_sequence_number', sa.Integer(), nullable=False, comment='N√∫mero actual de la secuencia'),
    sa.Column('sequence_padding', sa.Integer(), nullable=False, comment='N√∫mero de d√≠gitos para rellenar con ceros (ej: 0001)'),
    sa.Column('include_year_in_sequence', sa.Boolean(), nullable=False, comment='Si incluir el a√±o en la secuencia (ej: VEN/2025/0001)'),
    sa.Column('reset_sequence_yearly', sa.Boolean(), nullable=False, comment='Si resetear la secuencia cada a√±o'),
    sa.Column('requires_validation', sa.Boolean(), nullable=False, comment='Si los asientos en este diario requieren validaci√≥n'),
    sa.Column('allow_manual_entries', sa.Boolean(), nullable=False, comment='Si permite asientos manuales en este diario'),
    sa.Column('is_active', sa.Boolean(), nullable=False, comment='Si el diario est√° activo'),
    sa.Column('description', sa.Text(), nullable=True, comment='Descripci√≥n del prop√≥sito del diario'),
    sa.Column('last_sequence_reset_year', sa.Integer(), nullable=True, comment='√öltimo a√±o en que se resete√≥ la secuencia'),
    sa.Column('created_by_id', sa.UUID(), nullable=True),
    sa.Column('id', sa.UUID(), nullable=False),
    sa.Column('created_at', sa.DateTime(timezone=True), nullable=False),
    sa.Column('updated_at', sa.DateTime(timezone=True), nullable=False),
    sa.ForeignKeyConstraint(['created_by_id'], ['users.id'], name=op.f('fk_journals_created_by_id_users')),
    sa.ForeignKeyConstraint(['default_account_id'], ['accounts.id'], name=op.f('fk_journals_default_account_id_accounts')),
    sa.PrimaryKeyConstraint('id', name=op.f('pk_journals')),
    sa.UniqueConstraint('code', name='uq_journal_code'),
    sa.UniqueConstraint('sequence_prefix', name='uq_journal_sequence_prefix'),
    sa.UniqueConstraint('sequence_prefix', name=op.f('uq_journals_sequence_prefix'))
    )
    op.create_index(op.f('ix_journals_code'), 'journals', ['code'], unique=True)
    op.create_index(op.f('ix_journals_id'), 'journals', ['id'], unique=False)
    op.create_index(op.f('ix_journals_type'), 'journals', ['type'], unique=False)
    op.create_table('products',
    sa.Column('code', sa.String(length=50), nullable=True, comment='C√≥digo √∫nico del producto (se genera autom√°ticamente si no se proporciona)'),
    sa.Column('name', sa.String(length=200), nullable=False, comment='Nombre √∫nico del producto (case-sensitive)'),
    sa.Column('description', sa.Text(), nullable=True, comment='Descripci√≥n detallada del producto'),
    sa.Column('product_type', sa.Enum('PRODUCT', 'SERVICE', 'BOTH', name='producttype'), nullable=False, comment='Tipo de producto: f√≠sico, servicio o ambos'),
    sa.Column('category', sa.String(length=100), nullable=True, comment='Categor√≠a del producto'),
    sa.Column('subcategory', sa.String(length=100), nullable=True, comment='Subcategor√≠a del producto'),
    sa.Column('brand', sa.String(length=100), nullable=True, comment='Marca del producto'),
    sa.Column('status', sa.Enum('ACTIVE', 'INACTIVE', 'DISCONTINUED', name='productstatus'), nullable=False, comment='Estado actual del producto'),
    sa.Column('measurement_unit', sa.Enum('UNIT', 'KG', 'GRAM', 'LITER', 'METER', 'CM', 'M2', 'M3', 'HOUR', 'DAY', 'MONTH', 'YEAR', 'DOZEN', 'PACK', 'BOX', name='measurementunit'), nullable=False, comment='Unidad de medida principal'),
    sa.Column('weight', sa.Numeric(precision=10, scale=3), nullable=True, comment='Peso en kilogramos'),
    sa.Column('dimensions', sa.String(length=100), nullable=True, comment='Dimensiones (LxAxA)'),
    sa.Column('purchase_price', sa.Numeric(precision=15, scale=4), nullable=False, comment='Precio de compra'),
    sa.Column('sale_price', sa.Numeric(precision=15, scale=4), nullable=False, comment='Precio de venta'),
    sa.Column('min_sale_price', sa.Numeric(precision=15, scale=4), nullable=False, comment='Precio m√≠nimo de venta'),
    sa.Column('suggested_price', sa.Numeric(precision=15, scale=4), nullable=False, comment='Precio sugerido'),
    sa.Column('tax_category', sa.Enum('EXEMPT', 'ZERO_RATE', 'REDUCED_RATE', 'STANDARD_RATE', 'SUPER_REDUCED_RATE', name='taxcategory'), nullable=False, comment='Categor√≠a fiscal del producto'),
    sa.Column('tax_rate', sa.Numeric(precision=5, scale=2), nullable=False, comment='Tasa de impuesto aplicable (%)'),
    sa.Column('sales_account_id', sa.UUID(), nullable=True, comment='Cuenta contable para ventas'),
    sa.Column('purchase_account_id', sa.UUID(), nullable=True, comment='Cuenta contable para compras'),
    sa.Column('inventory_account_id', sa.UUID(), nullable=True, comment='Cuenta contable para inventario'),
    sa.Column('cogs_account_id', sa.UUID(), nullable=True, comment='Cuenta contable para costo de ventas'),
    sa.Column('manage_inventory', sa.Boolean(), nullable=False, comment='Indica si se maneja inventario'),
    sa.Column('current_stock', sa.Numeric(precision=15, scale=4), nullable=False, comment='Stock actual'),
    sa.Column('min_stock', sa.Numeric(precision=15, scale=4), nullable=False, comment='Stock m√≠nimo'),
    sa.Column('max_stock', sa.Numeric(precision=15, scale=4), nullable=False, comment='Stock m√°ximo'),
    sa.Column('reorder_point', sa.Numeric(precision=15, scale=4), nullable=False, comment='Punto de reorden'),
    sa.Column('barcode', sa.String(length=50), nullable=True, comment='C√≥digo de barras'),
    sa.Column('sku', sa.String(length=50), nullable=True, comment='Stock Keeping Unit'),
    sa.Column('internal_reference', sa.String(length=50), nullable=True, comment='Referencia interna'),
    sa.Column('supplier_reference', sa.String(length=50), nullable=True, comment='Referencia del proveedor'),
    sa.Column('notes', sa.Text(), nullable=True, comment='Notas adicionales'),
    sa.Column('external_reference', sa.String(length=100), nullable=True, comment='Referencia externa'),
    sa.Column('launch_date', sa.DateTime(timezone=True), nullable=True, comment='Fecha de lanzamiento'),
    sa.Column('discontinuation_date', sa.DateTime(timezone=True), nullable=True, comment='Fecha de descontinuaci√≥n'),
    sa.Column('id', sa.UUID(), nullable=False),
    sa.Column('created_at', sa.DateTime(timezone=True), nullable=False),
    sa.Column('updated_at', sa.DateTime(timezone=True), nullable=False),
    sa.ForeignKeyConstraint(['cogs_account_id'], ['accounts.id'], name=op.f('fk_products_cogs_account_id_accounts')),
    sa.ForeignKeyConstraint(['inventory_account_id'], ['accounts.id'], name=op.f('fk_products_inventory_account_id_accounts')),
    sa.ForeignKeyConstraint(['purchase_account_id'], ['accounts.id'], name=op.f('fk_products_purchase_account_id_accounts')),
    sa.ForeignKeyConstraint(['sales_account_id'], ['accounts.id'], name=op.f('fk_products_sales_account_id_accounts')),
    sa.PrimaryKeyConstraint('id', name=op.f('pk_products')),
    sa.UniqueConstraint('barcode', name=op.f('uq_products_barcode')),
    sa.UniqueConstraint('sku', name=op.f('uq_products_sku'))
    )
    op.create_index(op.f('ix_products_category'), 'products', ['category'], unique=False)
    op.create_index(op.f('ix_products_code'), 'products', ['code'], unique=True)
    op.create_index(op.f('ix_products_id'), 'products', ['id'], unique=False)
    op.create_index(op.f('ix_products_name'), 'products', ['name'], unique=True)
    op.create_table('taxes',
    sa.Column('code', sa.String(length=20), nullable=False, comment='C√≥digo √∫nico del impuesto (ej: IVA21)'),
    sa.Column('name', sa.String(length=100), nullable=False, comment='Nombre del impuesto'),
    sa.Column('description', sa.Text(), nullable=True, comment='Descripci√≥n detallada'),
    sa.Column('tax_type', sa.Enum('SALE', 'PURCHASE', name='taxtype'), nullable=False, comment='Tipo: venta o compra'),
    sa.Column('tax_scope', sa.Enum('INCLUSIVE', 'EXCLUSIVE', name='taxscope'), nullable=False, comment='Si el precio incluye o excluye el impuesto'),
    sa.Column('percentage', sa.Numeric(precision=5, scale=2), nullable=False, comment='Porcentaje del impuesto'),
    sa.Column('account_id', sa.UUID(), nullable=False, comment='Cuenta contable del impuesto'),
    sa.Column('is_active', sa.Boolean(), nullable=False),
    sa.Column('is_default', sa.Boolean(), nullable=False, comment='Si es el impuesto por defecto para su tipo'),
    sa.Column('created_by_id', sa.UUID(), nullable=True),
    sa.Column('created_at', sa.DateTime(timezone=True), nullable=False),
    sa.Column('updated_at', sa.DateTime(timezone=True), nullable=False),
    sa.Column('id', sa.UUID(), nullable=False),
    sa.ForeignKeyConstraint(['account_id'], ['accounts.id'], name=op.f('fk_taxes_account_id_accounts')),
    sa.ForeignKeyConstraint(['created_by_id'], ['users.id'], name=op.f('fk_taxes_created_by_id_users')),
    sa.PrimaryKeyConstraint('id', name=op.f('pk_taxes'))
    )
    op.create_index(op.f('ix_taxes_code'), 'taxes', ['code'], unique=True)
    op.create_index(op.f('ix_taxes_id'), 'taxes', ['id'], unique=False)
    op.create_table('third_parties',
    sa.Column('code', sa.String(length=20), nullable=False),
    sa.Column('name', sa.String(length=200), nullable=False),
    sa.Column('commercial_name', sa.String(length=200), nullable=True),
    sa.Column('third_party_type', sa.Enum('CUSTOMER', 'SUPPLIER', 'EMPLOYEE', 'SHAREHOLDER', 'BANK', 'GOVERNMENT', 'OTHER', name='thirdpartytype'), nullable=False),
    sa.Column('document_type', sa.Enum('RUT', 'NIT', 'CUIT', 'RFC', 'PASSPORT', 'DNI', 'OTHER', name='documenttype'), nullable=False),
    sa.Column('document_number', sa.String(length=50), nullable=False),
    sa.Column('tax_id', sa.String(length=50), nullable=True),
    sa.Column('email', sa.String(length=254), nullable=True),
    sa.Column('phone', sa.String(length=20), nullable=True),
    sa.Column('mobile', sa.String(length=20), nullable=True),
    sa.Column('website', sa.String(length=255), nullable=True),
    sa.Column('address', sa.String(length=500), nullable=True),
    sa.Column('city', sa.String(length=100), nullable=True),
    sa.Column('state', sa.String(length=100), nullable=True),
    sa.Column('country', sa.String(length=100), nullable=True),
    sa.Column('postal_code', sa.String(length=20), nullable=True),
    sa.Column('credit_limit', sa.String(length=20), nullable=True),
    sa.Column('payment_terms', sa.String(length=100), nullable=True),
    sa.Column('discount_percentage', sa.String(length=10), nullable=True),
    sa.Column('bank_name', sa.String(length=200), nullable=True),
    sa.Column('bank_account', sa.String(length=50), nullable=True),
    sa.Column('receivable_account_id', sa.UUID(), nullable=True, comment='Cuenta por cobrar espec√≠fica para este cliente'),
    sa.Column('payable_account_id', sa.UUID(), nullable=True, comment='Cuenta por pagar espec√≠fica para este proveedor'),
    sa.Column('is_active', sa.Boolean(), nullable=False),
    sa.Column('is_tax_withholding_agent', sa.Boolean(), nullable=False),
    sa.Column('notes', sa.Text(), nullable=True),
    sa.Column('internal_code', sa.String(length=50), nullable=True),
    sa.Column('id', sa.UUID(), nullable=False),
    sa.Column('created_at', sa.DateTime(timezone=True), nullable=False),
    sa.Column('updated_at', sa.DateTime(timezone=True), nullable=False),
    sa.ForeignKeyConstraint(['payable_account_id'], ['accounts.id'], name=op.f('fk_third_parties_payable_account_id_accounts')),
    sa.ForeignKeyConstraint(['receivable_account_id'], ['accounts.id'], name=op.f('fk_third_parties_receivable_account_id_accounts')),
    sa.PrimaryKeyConstraint('id', name=op.f('pk_third_parties'))
    )
    op.create_index(op.f('ix_third_parties_code'), 'third_parties', ['code'], unique=True)
    op.create_index(op.f('ix_third_parties_document_number'), 'third_parties', ['document_number'], unique=False)
    op.create_index(op.f('ix_third_parties_id'), 'third_parties', ['id'], unique=False)
    op.create_index(op.f('ix_third_parties_name'), 'third_parties', ['name'], unique=True)
    op.create_index(op.f('ix_third_parties_third_party_type'), 'third_parties', ['third_party_type'], unique=False)
    op.create_table('bank_journal_configs',
    sa.Column('journal_id', sa.UUID(), nullable=False, comment='ID del diario bancario'),
    sa.Column('bank_account_number', sa.String(length=50), nullable=True, comment='N√∫mero de cuenta bancaria asociada'),
    sa.Column('bank_account_id', sa.UUID(), nullable=True, comment='Cuenta bancaria principal (activo)'),
    sa.Column('transit_account_id', sa.UUID(), nullable=True, comment='Cuenta transitoria para operaciones en proceso'),
    sa.Column('profit_account_id', sa.UUID(), nullable=True, comment='Cuenta de ganancias (intereses, diferencias positivas)'),
    sa.Column('loss_account_id', sa.UUID(), nullable=True, comment='Cuenta de p√©rdidas (comisiones, diferencias negativas)'),
    sa.Column('dedicated_payment_sequence', sa.Boolean(), nullable=False, comment='Si usar secuencia dedicada para pagos (separada de transacciones)'),
    sa.Column('allow_inbound_payments', sa.Boolean(), nullable=False, comment='Si permite pagos entrantes (cobros)'),
    sa.Column('inbound_payment_mode', sa.Enum('MANUAL', 'BATCH', name='paymentmode'), nullable=False, comment='Modo de procesamiento de pagos entrantes'),
    sa.Column('inbound_receipt_account_id', sa.UUID(), nullable=True, comment='Cuenta de recibo para pagos entrantes'),
    sa.Column('allow_outbound_payments', sa.Boolean(), nullable=False, comment='Si permite pagos salientes'),
    sa.Column('outbound_payment_mode', sa.Enum('MANUAL', 'BATCH', name='paymentmode'), nullable=False, comment='Modo de procesamiento de pagos salientes'),
    sa.Column('outbound_payment_method', sa.String(length=50), nullable=True, comment='M√©todo de pago por defecto para salientes'),
    sa.Column('outbound_payment_name', sa.String(length=100), nullable=True, comment='Nombre descriptivo para pagos salientes'),
    sa.Column('outbound_pending_account_id', sa.UUID(), nullable=True, comment='Cuenta de pagos pendientes para salientes'),
    sa.Column('currency_code', sa.String(length=3), nullable=False, comment='Moneda principal del diario bancario'),
    sa.Column('allow_currency_exchange', sa.Boolean(), nullable=False, comment='Si permite operaciones con m√∫ltiples monedas'),
    sa.Column('auto_reconcile', sa.Boolean(), nullable=False, comment='Si intenta conciliaci√≥n autom√°tica'),
    sa.Column('description', sa.Text(), nullable=True, comment='Descripci√≥n de la configuraci√≥n bancaria'),
    sa.Column('id', sa.UUID(), nullable=False),
    sa.Column('created_at', sa.DateTime(timezone=True), nullable=False),
    sa.Column('updated_at', sa.DateTime(timezone=True), nullable=False),
    sa.ForeignKeyConstraint(['bank_account_id'], ['accounts.id'], name=op.f('fk_bank_journal_configs_bank_account_id_accounts')),
    sa.ForeignKeyConstraint(['inbound_receipt_account_id'], ['accounts.id'], name=op.f('fk_bank_journal_configs_inbound_receipt_account_id_accounts')),
    sa.ForeignKeyConstraint(['journal_id'], ['journals.id'], name=op.f('fk_bank_journal_configs_journal_id_journals'), ondelete='CASCADE'),
    sa.ForeignKeyConstraint(['loss_account_id'], ['accounts.id'], name=op.f('fk_bank_journal_configs_loss_account_id_accounts')),
    sa.ForeignKeyConstraint(['outbound_pending_account_id'], ['accounts.id'], name=op.f('fk_bank_journal_configs_outbound_pending_account_id_accounts')),
    sa.ForeignKeyConstraint(['profit_account_id'], ['accounts.id'], name=op.f('fk_bank_journal_configs_profit_account_id_accounts')),
    sa.ForeignKeyConstraint(['transit_account_id'], ['accounts.id'], name=op.f('fk_bank_journal_configs_transit_account_id_accounts')),
    sa.PrimaryKeyConstraint('journal_id', 'id', name=op.f('pk_bank_journal_configs'))
    )
    op.create_index(op.f('ix_bank_journal_configs_id'), 'bank_journal_configs', ['id'], unique=False)
    op.create_table('journal_entries',
    sa.Column('number', sa.String(length=50), nullable=False),
    sa.Column('reference', sa.String(length=100), nullable=True),
    sa.Column('description', sa.Text(), nullable=True, comment='Descripci√≥n del asiento (opcional, se genera autom√°ticamente si no se proporciona)'),
    sa.Column('journal_id', sa.UUID(), nullable=True, comment='Diario al que pertenece este asiento'),
    sa.Column('entry_type', sa.Enum('MANUAL', 'AUTOMATIC', 'ADJUSTMENT', 'OPENING', 'CLOSING', 'REVERSAL', 'PAYMENT', name='journalentrytype'), nullable=False),
    sa.Column('transaction_origin', sa.Enum('SALE', 'PURCHASE', 'ADJUSTMENT', 'TRANSFER', 'PAYMENT', 'COLLECTION', 'OPENING', 'CLOSING', 'OTHER', name='transactionorigin'), nullable=True, comment='Origen de la transacci√≥n (venta, compra, etc.)'),
    sa.Column('entry_date', sa.DateTime(timezone=True), nullable=False),
    sa.Column('posting_date', sa.DateTime(timezone=True), nullable=True),
    sa.Column('status', sa.Enum('DRAFT', 'PENDING', 'APPROVED', 'POSTED', 'CANCELLED', name='journalentrystatus'), nullable=False),
    sa.Column('total_debit', sa.Numeric(precision=15, scale=2), nullable=False),
    sa.Column('total_credit', sa.Numeric(precision=15, scale=2), nullable=False),
    sa.Column('created_by_id', sa.UUID(), nullable=False),
    sa.Column('approved_by_id', sa.UUID(), nullable=True),
    sa.Column('posted_by_id', sa.UUID(), nullable=True),
    sa.Column('cancelled_by_id', sa.UUID(), nullable=True),
    sa.Column('approved_at', sa.DateTime(timezone=True), nullable=True),
    sa.Column('posted_at', sa.DateTime(timezone=True), nullable=True),
    sa.Column('cancelled_at', sa.DateTime(timezone=True), nullable=True),
    sa.Column('notes', sa.Text(), nullable=True),
    sa.Column('external_reference', sa.String(length=100), nullable=True),
    sa.Column('id', sa.UUID(), nullable=False),
    sa.Column('created_at', sa.DateTime(timezone=True), nullable=False),
    sa.Column('updated_at', sa.DateTime(timezone=True), nullable=False),
    sa.ForeignKeyConstraint(['approved_by_id'], ['users.id'], name=op.f('fk_journal_entries_approved_by_id_users')),
    sa.ForeignKeyConstraint(['cancelled_by_id'], ['users.id'], name=op.f('fk_journal_entries_cancelled_by_id_users')),
    sa.ForeignKeyConstraint(['created_by_id'], ['users.id'], name=op.f('fk_journal_entries_created_by_id_users')),
    sa.ForeignKeyConstraint(['journal_id'], ['journals.id'], name=op.f('fk_journal_entries_journal_id_journals')),
    sa.ForeignKeyConstraint(['posted_by_id'], ['users.id'], name=op.f('fk_journal_entries_posted_by_id_users')),
    sa.PrimaryKeyConstraint('id', name=op.f('pk_journal_entries'))
    )
    op.create_index(op.f('ix_journal_entries_id'), 'journal_entries', ['id'], unique=False)
    op.create_index(op.f('ix_journal_entries_journal_id'), 'journal_entries', ['journal_id'], unique=False)
    op.create_index(op.f('ix_journal_entries_number'), 'journal_entries', ['number'], unique=True)
    op.create_table('invoices',
    sa.Column('number', sa.String(length=50), nullable=False),
    sa.Column('internal_reference', sa.String(length=100), nullable=True),
    sa.Column('external_reference', sa.String(length=100), nullable=True, comment='Referencia externa (n√∫mero de factura del proveedor)'),
    sa.Column('invoice_type', sa.Enum('CUSTOMER_INVOICE', 'SUPPLIER_INVOICE', 'CREDIT_NOTE', 'DEBIT_NOTE', name='invoicetype'), nullable=False),
    sa.Column('status', sa.Enum('DRAFT', 'PENDING', 'APPROVED', 'POSTED', 'PAID', 'PARTIALLY_PAID', 'OVERDUE', 'CANCELLED', name='invoicestatus'), nullable=False),
    sa.Column('third_party_id', sa.UUID(), nullable=False),
    sa.Column('invoice_date', sa.Date(), nullable=False),
    sa.Column('due_date', sa.Date(), nullable=False),
    sa.Column('payment_terms_id', sa.UUID(), nullable=True),
    sa.Column('third_party_account_id', sa.UUID(), nullable=True, comment='Override cuenta cliente/proveedor'),
    sa.Column('subtotal', sa.Numeric(precision=15, scale=2), nullable=False),
    sa.Column('tax_amount', sa.Numeric(precision=15, scale=2), nullable=False),
    sa.Column('discount_amount', sa.Numeric(precision=15, scale=2), nullable=False),
    sa.Column('total_amount', sa.Numeric(precision=15, scale=2), nullable=False),
    sa.Column('paid_amount', sa.Numeric(precision=15, scale=2), nullable=False),
    sa.Column('outstanding_amount', sa.Numeric(precision=15, scale=2), nullable=False),
    sa.Column('currency_code', sa.String(length=3), nullable=False),
    sa.Column('exchange_rate', sa.Numeric(precision=10, scale=4), nullable=False),
    sa.Column('description', sa.Text(), nullable=True),
    sa.Column('notes', sa.Text(), nullable=True),
    sa.Column('cost_center_id', sa.UUID(), nullable=True),
    sa.Column('journal_id', sa.UUID(), nullable=True, comment='Diario contable para la numeraci√≥n de factura'),
    sa.Column('journal_entry_id', sa.UUID(), nullable=True),
    sa.Column('created_by_id', sa.UUID(), nullable=False),
    sa.Column('updated_by_id', sa.UUID(), nullable=True, comment='Quien modific√≥ por √∫ltima vez'),
    sa.Column('posted_by_id', sa.UUID(), nullable=True, comment='Quien contabiliz√≥ la factura'),
    sa.Column('cancelled_by_id', sa.UUID(), nullable=True, comment='Quien cancel√≥ la factura'),
    sa.Column('created_at', sa.DateTime(timezone=True), nullable=False),
    sa.Column('updated_at', sa.DateTime(timezone=True), nullable=False),
    sa.Column('posted_at', sa.DateTime(timezone=True), nullable=True, comment='Fecha de contabilizaci√≥n'),
    sa.Column('cancelled_at', sa.DateTime(timezone=True), nullable=True, comment='Fecha de cancelaci√≥n'),
    sa.Column('id', sa.UUID(), nullable=False),
    sa.ForeignKeyConstraint(['cancelled_by_id'], ['users.id'], name=op.f('fk_invoices_cancelled_by_id_users')),
    sa.ForeignKeyConstraint(['cost_center_id'], ['cost_centers.id'], name=op.f('fk_invoices_cost_center_id_cost_centers')),
    sa.ForeignKeyConstraint(['created_by_id'], ['users.id'], name=op.f('fk_invoices_created_by_id_users')),
    sa.ForeignKeyConstraint(['journal_entry_id'], ['journal_entries.id'], name=op.f('fk_invoices_journal_entry_id_journal_entries')),
    sa.ForeignKeyConstraint(['journal_id'], ['journals.id'], name=op.f('fk_invoices_journal_id_journals')),
    sa.ForeignKeyConstraint(['payment_terms_id'], ['payment_terms.id'], name=op.f('fk_invoices_payment_terms_id_payment_terms')),
    sa.ForeignKeyConstraint(['posted_by_id'], ['users.id'], name=op.f('fk_invoices_posted_by_id_users')),
    sa.ForeignKeyConstraint(['third_party_account_id'], ['accounts.id'], name=op.f('fk_invoices_third_party_account_id_accounts')),
    sa.ForeignKeyConstraint(['third_party_id'], ['third_parties.id'], name=op.f('fk_invoices_third_party_id_third_parties')),
    sa.ForeignKeyConstraint(['updated_by_id'], ['users.id'], name=op.f('fk_invoices_updated_by_id_users')),
    sa.PrimaryKeyConstraint('id', name=op.f('pk_invoices'))
    )
    op.create_index(op.f('ix_invoices_id'), 'invoices', ['id'], unique=False)
    op.create_index(op.f('ix_invoices_number'), 'invoices', ['number'], unique=True)
    op.create_index(op.f('ix_invoices_third_party_id'), 'invoices', ['third_party_id'], unique=False)
    op.create_table('journal_entry_lines',
    sa.Column('journal_entry_id', sa.UUID(), nullable=False),
    sa.Column('account_id', sa.UUID(), nullable=False),
    sa.Column('debit_amount', sa.Numeric(precision=15, scale=2), nullable=False),
    sa.Column('credit_amount', sa.Numeric(precision=15, scale=2), nullable=False),
    sa.Column('description', sa.Text(), nullable=True),
    sa.Column('reference', sa.String(length=100), nullable=True),
    sa.Column('third_party_id', sa.UUID(), nullable=True),
    sa.Column('cost_center_id', sa.UUID(), nullable=True),
    sa.Column('product_id', sa.UUID(), nullable=True, comment='Producto asociado a esta l√≠nea'),
    sa.Column('quantity', sa.Numeric(precision=15, scale=4), nullable=True, comment='Cantidad del producto'),
    sa.Column('unit_price', sa.Numeric(precision=15, scale=4), nullable=True, comment='Precio unitario del producto'),
    sa.Column('discount_percentage', sa.Numeric(precision=5, scale=2), nullable=True, comment='Porcentaje de descuento aplicado'),
    sa.Column('discount_amount', sa.Numeric(precision=15, scale=2), nullable=True, comment='Monto de descuento aplicado'),
    sa.Column('tax_percentage', sa.Numeric(precision=5, scale=2), nullable=True, comment='Porcentaje de impuesto aplicado'),
    sa.Column('tax_amount', sa.Numeric(precision=15, scale=2), nullable=True, comment='Monto de impuesto aplicado'),
    sa.Column('invoice_date', sa.Date(), nullable=True, comment='Fecha de la factura (diferente a fecha de creaci√≥n del asiento)'),
    sa.Column('due_date', sa.Date(), nullable=True, comment='Fecha de vencimiento de la factura'),
    sa.Column('payment_terms_id', sa.UUID(), nullable=True, comment='Condiciones de pago aplicables a esta l√≠nea'),
    sa.Column('line_number', sa.Integer(), nullable=False),
    sa.Column('id', sa.UUID(), nullable=False),
    sa.Column('created_at', sa.DateTime(timezone=True), nullable=False),
    sa.Column('updated_at', sa.DateTime(timezone=True), nullable=False),
    sa.ForeignKeyConstraint(['account_id'], ['accounts.id'], name=op.f('fk_journal_entry_lines_account_id_accounts')),
    sa.ForeignKeyConstraint(['cost_center_id'], ['cost_centers.id'], name=op.f('fk_journal_entry_lines_cost_center_id_cost_centers')),
    sa.ForeignKeyConstraint(['journal_entry_id'], ['journal_entries.id'], name=op.f('fk_journal_entry_lines_journal_entry_id_journal_entries')),
    sa.ForeignKeyConstraint(['payment_terms_id'], ['payment_terms.id'], name=op.f('fk_journal_entry_lines_payment_terms_id_payment_terms')),
    sa.ForeignKeyConstraint(['product_id'], ['products.id'], name=op.f('fk_journal_entry_lines_product_id_products')),
    sa.ForeignKeyConstraint(['third_party_id'], ['third_parties.id'], name=op.f('fk_journal_entry_lines_third_party_id_third_parties')),
    sa.PrimaryKeyConstraint('id', name=op.f('pk_journal_entry_lines'))
    )
    op.create_index(op.f('ix_journal_entry_lines_id'), 'journal_entry_lines', ['id'], unique=False)
    op.create_table('payments',
    sa.Column('number', sa.String(length=50), nullable=False),
    sa.Column('reference', sa.String(length=100), nullable=True),
    sa.Column('external_reference', sa.String(length=100), nullable=True, comment='Referencia externa (n√∫mero de cheque, transacci√≥n, etc.)'),
    sa.Column('payment_type', sa.Enum('CUSTOMER_PAYMENT', 'SUPPLIER_PAYMENT', 'INTERNAL_TRANSFER', 'ADVANCE_PAYMENT', 'REFUND', name='paymenttype'), nullable=False),
    sa.Column('payment_method', sa.Enum('CASH', 'CHECK', 'BANK_TRANSFER', 'CREDIT_CARD', 'DEBIT_CARD', 'ELECTRONIC', 'OTHER', name='paymentmethod'), nullable=False),
    sa.Column('status', sa.Enum('DRAFT', 'PENDING', 'CONFIRMED', 'POSTED', 'RECONCILED', 'CANCELLED', name='paymentstatus'), nullable=False),
    sa.Column('third_party_id', sa.UUID(), nullable=True),
    sa.Column('payment_date', sa.Date(), nullable=False),
    sa.Column('value_date', sa.Date(), nullable=True, comment='Fecha valor (fecha efectiva del pago)'),
    sa.Column('amount', sa.Numeric(precision=15, scale=2), nullable=False),
    sa.Column('allocated_amount', sa.Numeric(precision=15, scale=2), nullable=False, comment='Monto asignado a facturas'),
    sa.Column('unallocated_amount', sa.Numeric(precision=15, scale=2), nullable=False, comment='Monto no asignado'),
    sa.Column('currency_code', sa.String(length=3), nullable=False),
    sa.Column('exchange_rate', sa.Numeric(precision=10, scale=4), nullable=False),
    sa.Column('account_id', sa.UUID(), nullable=False, comment='Cuenta de efectivo/banco donde se recibi√≥/hizo el pago'),
    sa.Column('bank_account_number', sa.String(length=50), nullable=True),
    sa.Column('check_number', sa.String(length=50), nullable=True),
    sa.Column('transaction_id', sa.String(length=100), nullable=True),
    sa.Column('description', sa.Text(), nullable=True),
    sa.Column('notes', sa.Text(), nullable=True),
    sa.Column('journal_entry_id', sa.UUID(), nullable=True),
    sa.Column('journal_id', sa.UUID(), nullable=True, comment='Journal contable donde se registra el pago'),
    sa.Column('is_reconciled', sa.Boolean(), nullable=False),
    sa.Column('reconciled_at', sa.DateTime(timezone=True), nullable=True),
    sa.Column('created_by_id', sa.UUID(), nullable=False),
    sa.Column('confirmed_by_id', sa.UUID(), nullable=True),
    sa.Column('posted_by_id', sa.UUID(), nullable=True),
    sa.Column('cancelled_by_id', sa.UUID(), nullable=True),
    sa.Column('confirmed_at', sa.DateTime(timezone=True), nullable=True),
    sa.Column('posted_at', sa.DateTime(timezone=True), nullable=True),
    sa.Column('cancelled_at', sa.DateTime(timezone=True), nullable=True),
    sa.Column('id', sa.UUID(), nullable=False),
    sa.Column('created_at', sa.DateTime(timezone=True), nullable=False),
    sa.Column('updated_at', sa.DateTime(timezone=True), nullable=False),
    sa.ForeignKeyConstraint(['account_id'], ['accounts.id'], name=op.f('fk_payments_account_id_accounts')),
    sa.ForeignKeyConstraint(['cancelled_by_id'], ['users.id'], name=op.f('fk_payments_cancelled_by_id_users')),
    sa.ForeignKeyConstraint(['confirmed_by_id'], ['users.id'], name=op.f('fk_payments_confirmed_by_id_users')),
    sa.ForeignKeyConstraint(['created_by_id'], ['users.id'], name=op.f('fk_payments_created_by_id_users')),
    sa.ForeignKeyConstraint(['journal_entry_id'], ['journal_entries.id'], name=op.f('fk_payments_journal_entry_id_journal_entries')),
    sa.ForeignKeyConstraint(['journal_id'], ['journals.id'], name=op.f('fk_payments_journal_id_journals')),
    sa.ForeignKeyConstraint(['posted_by_id'], ['users.id'], name=op.f('fk_payments_posted_by_id_users')),
    sa.ForeignKeyConstraint(['third_party_id'], ['third_parties.id'], name=op.f('fk_payments_third_party_id_third_parties')),
    sa.PrimaryKeyConstraint('id', name=op.f('pk_payments'))
    )
    op.create_index(op.f('ix_payments_id'), 'payments', ['id'], unique=False)
    op.create_index(op.f('ix_payments_number'), 'payments', ['number'], unique=True)
    op.create_index(op.f('ix_payments_third_party_id'), 'payments', ['third_party_id'], unique=False)
    op.create_table('bank_extract_lines',
    sa.Column('bank_extract_id', sa.UUID(), nullable=False),
    sa.Column('sequence', sa.Integer(), nullable=False),
    sa.Column('transaction_date', sa.Date(), nullable=False),
    sa.Column('value_date', sa.Date(), nullable=True),
    sa.Column('reference', sa.String(length=100), nullable=True),
    sa.Column('bank_reference', sa.String(length=100), nullable=True),
    sa.Column('check_number', sa.String(length=50), nullable=True),
    sa.Column('description', sa.Text(), nullable=False),
    sa.Column('additional_info', sa.Text(), nullable=True),
    sa.Column('line_type', sa.Enum('DEBIT', 'CREDIT', 'TRANSFER', 'CHARGE', 'INTEREST', 'OTHER', name='bankextractlinetype'), nullable=False),
    sa.Column('debit_amount', sa.Numeric(precision=15, scale=2), nullable=False),
    sa.Column('credit_amount', sa.Numeric(precision=15, scale=2), nullable=False),
    sa.Column('balance', sa.Numeric(precision=15, scale=2), nullable=True),
    sa.Column('partner_name', sa.String(length=255), nullable=True),
    sa.Column('partner_account', sa.String(length=50), nullable=True),
    sa.Column('is_reconciled', sa.Boolean(), nullable=False),
    sa.Column('reconciled_amount', sa.Numeric(precision=15, scale=2), nullable=False),
    sa.Column('pending_amount', sa.Numeric(precision=15, scale=2), nullable=False),
    sa.Column('payment_id', sa.UUID(), nullable=True),
    sa.Column('created_by_id', sa.UUID(), nullable=False),
    sa.Column('reconciled_by_id', sa.UUID(), nullable=True),
    sa.Column('reconciled_at', sa.DateTime(timezone=True), nullable=True),
    sa.Column('id', sa.UUID(), nullable=False),
    sa.Column('created_at', sa.DateTime(timezone=True), nullable=False),
    sa.Column('updated_at', sa.DateTime(timezone=True), nullable=False),
    sa.ForeignKeyConstraint(['bank_extract_id'], ['bank_extracts.id'], name=op.f('fk_bank_extract_lines_bank_extract_id_bank_extracts')),
    sa.ForeignKeyConstraint(['created_by_id'], ['users.id'], name=op.f('fk_bank_extract_lines_created_by_id_users')),
    sa.ForeignKeyConstraint(['payment_id'], ['payments.id'], name=op.f('fk_bank_extract_lines_payment_id_payments')),
    sa.ForeignKeyConstraint(['reconciled_by_id'], ['users.id'], name=op.f('fk_bank_extract_lines_reconciled_by_id_users')),
    sa.PrimaryKeyConstraint('id', name=op.f('pk_bank_extract_lines'))
    )
    op.create_index(op.f('ix_bank_extract_lines_bank_extract_id'), 'bank_extract_lines', ['bank_extract_id'], unique=False)
    op.create_index(op.f('ix_bank_extract_lines_id'), 'bank_extract_lines', ['id'], unique=False)
    op.create_index(op.f('ix_bank_extract_lines_payment_id'), 'bank_extract_lines', ['payment_id'], unique=False)
    op.create_table('invoice_lines',
    sa.Column('invoice_id', sa.UUID(), nullable=False),
    sa.Column('sequence', sa.Integer(), nullable=False, comment='Orden de las l√≠neas'),
    sa.Column('product_id', sa.UUID(), nullable=True),
    sa.Column('description', sa.Text(), nullable=False, comment='Descripci√≥n de la l√≠nea'),
    sa.Column('quantity', sa.Numeric(precision=15, scale=4), nullable=False),
    sa.Column('unit_price', sa.Numeric(precision=15, scale=4), nullable=False),
    sa.Column('discount_percentage', sa.Numeric(precision=5, scale=2), nullable=False),
    sa.Column('account_id', sa.UUID(), nullable=True, comment='Override cuenta ingreso/gasto'),
    sa.Column('cost_center_id', sa.UUID(), nullable=True),
    sa.Column('subtotal', sa.Numeric(precision=15, scale=2), nullable=False, comment='quantity * unit_price'),
    sa.Column('discount_amount', sa.Numeric(precision=15, scale=2), nullable=False),
    sa.Column('tax_amount', sa.Numeric(precision=15, scale=2), nullable=False),
    sa.Column('total_amount', sa.Numeric(precision=15, scale=2), nullable=False, comment='subtotal - discount + tax'),
    sa.Column('created_by_id', sa.UUID(), nullable=False),
    sa.Column('updated_by_id', sa.UUID(), nullable=True),
    sa.Column('created_at', sa.DateTime(timezone=True), nullable=False),
    sa.Column('updated_at', sa.DateTime(timezone=True), nullable=False),
    sa.Column('id', sa.UUID(), nullable=False),
    sa.ForeignKeyConstraint(['account_id'], ['accounts.id'], name=op.f('fk_invoice_lines_account_id_accounts')),
    sa.ForeignKeyConstraint(['cost_center_id'], ['cost_centers.id'], name=op.f('fk_invoice_lines_cost_center_id_cost_centers')),
    sa.ForeignKeyConstraint(['created_by_id'], ['users.id'], name=op.f('fk_invoice_lines_created_by_id_users')),
    sa.ForeignKeyConstraint(['invoice_id'], ['invoices.id'], name=op.f('fk_invoice_lines_invoice_id_invoices')),
    sa.ForeignKeyConstraint(['product_id'], ['products.id'], name=op.f('fk_invoice_lines_product_id_products')),
    sa.ForeignKeyConstraint(['updated_by_id'], ['users.id'], name=op.f('fk_invoice_lines_updated_by_id_users')),
    sa.PrimaryKeyConstraint('id', name=op.f('pk_invoice_lines'))
    )
    op.create_index(op.f('ix_invoice_lines_id'), 'invoice_lines', ['id'], unique=False)
    op.create_index(op.f('ix_invoice_lines_invoice_id'), 'invoice_lines', ['invoice_id'], unique=False)
    op.create_table('nfes',
    sa.Column('chave_nfe', sa.String(length=44), nullable=False, comment='Chave de acceso de 44 d√≠gitos'),
    sa.Column('numero_nfe', sa.String(length=20), nullable=False),
    sa.Column('serie', sa.String(length=10), nullable=False),
    sa.Column('data_emissao', sa.DateTime(timezone=True), nullable=False, comment='Data de emiss√£o da NFe'),
    sa.Column('data_saida_entrada', sa.DateTime(timezone=True), nullable=True, comment='Data de sa√≠da/entrada'),
    sa.Column('tipo_nfe', sa.Enum('ENTRADA', 'SAIDA', name='nfetype'), nullable=False, comment='0=Entrada, 1=Sa√≠da'),
    sa.Column('natureza_operacao', sa.String(length=500), nullable=False),
    sa.Column('finalidade_nfe', sa.String(length=10), nullable=True, comment='Finalidade: 1=Normal, 2=Complementar, 3=Ajuste, 4=Devolu√ß√£o'),
    sa.Column('cnpj_emitente', sa.String(length=14), nullable=False),
    sa.Column('nome_emitente', sa.String(length=500), nullable=False),
    sa.Column('fantasia_emitente', sa.String(length=500), nullable=True),
    sa.Column('cnpj_destinatario', sa.String(length=14), nullable=True),
    sa.Column('cpf_destinatario', sa.String(length=11), nullable=True),
    sa.Column('nome_destinatario', sa.String(length=500), nullable=False),
    sa.Column('valor_total_produtos', sa.Numeric(precision=15, scale=2), nullable=False),
    sa.Column('valor_total_icms', sa.Numeric(precision=15, scale=2), nullable=False),
    sa.Column('valor_total_ipi', sa.Numeric(precision=15, scale=2), nullable=False),
    sa.Column('valor_total_pis', sa.Numeric(precision=15, scale=2), nullable=False),
    sa.Column('valor_total_cofins', sa.Numeric(precision=15, scale=2), nullable=False),
    sa.Column('valor_total_nfe', sa.Numeric(precision=15, scale=2), nullable=False),
    sa.Column('status', sa.Enum('PENDING', 'PROCESSING', 'PROCESSED', 'ERROR', 'CANCELLED', 'UNLINKED', name='nfestatus'), nullable=False),
    sa.Column('error_message', sa.Text(), nullable=True),
    sa.Column('xml_content', sa.Text(), nullable=False, comment='Contenido XML completo'),
    sa.Column('xml_metadata', sa.JSON(), nullable=True, comment='Metadatos extra√≠dos del XML'),
    sa.Column('invoice_id', sa.UUID(), nullable=True, comment='Factura generada'),
    sa.Column('emitente_third_party_id', sa.UUID(), nullable=True, comment='Tercero emitente'),
    sa.Column('destinatario_third_party_id', sa.UUID(), nullable=True, comment='Tercero destinatario'),
    sa.Column('created_by_id', sa.UUID(), nullable=False),
    sa.Column('processed_by_id', sa.UUID(), nullable=True),
    sa.Column('created_at', sa.DateTime(timezone=True), nullable=False),
    sa.Column('processed_at', sa.DateTime(timezone=True), nullable=True),
    sa.Column('id', sa.UUID(), nullable=False),
    sa.Column('updated_at', sa.DateTime(timezone=True), nullable=False),
    sa.ForeignKeyConstraint(['created_by_id'], ['users.id'], name=op.f('fk_nfes_created_by_id_users')),
    sa.ForeignKeyConstraint(['destinatario_third_party_id'], ['third_parties.id'], name=op.f('fk_nfes_destinatario_third_party_id_third_parties')),
    sa.ForeignKeyConstraint(['emitente_third_party_id'], ['third_parties.id'], name=op.f('fk_nfes_emitente_third_party_id_third_parties')),
    sa.ForeignKeyConstraint(['invoice_id'], ['invoices.id'], name=op.f('fk_nfes_invoice_id_invoices')),
    sa.ForeignKeyConstraint(['processed_by_id'], ['users.id'], name=op.f('fk_nfes_processed_by_id_users')),
    sa.PrimaryKeyConstraint('id', name=op.f('pk_nfes'))
    )
    op.create_index(op.f('ix_nfes_chave_nfe'), 'nfes', ['chave_nfe'], unique=True)
    op.create_index(op.f('ix_nfes_cnpj_destinatario'), 'nfes', ['cnpj_destinatario'], unique=False)
    op.create_index(op.f('ix_nfes_cnpj_emitente'), 'nfes', ['cnpj_emitente'], unique=False)
    op.create_index(op.f('ix_nfes_cpf_destinatario'), 'nfes', ['cpf_destinatario'], unique=False)
    op.create_index(op.f('ix_nfes_id'), 'nfes', ['id'], unique=False)
    op.create_index(op.f('ix_nfes_numero_nfe'), 'nfes', ['numero_nfe'], unique=False)
    op.create_table('payment_invoices',
    sa.Column('payment_id', sa.UUID(), nullable=False),
    sa.Column('invoice_id', sa.UUID(), nullable=False),
    sa.Column('amount', sa.Numeric(precision=15, scale=2), nullable=False),
    sa.Column('allocation_date', sa.Date(), nullable=False),
    sa.Column('description', sa.Text(), nullable=True),
    sa.Column('created_by_id', sa.UUID(), nullable=False),
    sa.Column('id', sa.UUID(), nullable=False),
    sa.Column('created_at', sa.DateTime(timezone=True), nullable=False),
    sa.Column('updated_at', sa.DateTime(timezone=True), nullable=False),
    sa.ForeignKeyConstraint(['created_by_id'], ['users.id'], name=op.f('fk_payment_invoices_created_by_id_users')),
    sa.ForeignKeyConstraint(['invoice_id'], ['invoices.id'], name=op.f('fk_payment_invoices_invoice_id_invoices')),
    sa.ForeignKeyConstraint(['payment_id'], ['payments.id'], name=op.f('fk_payment_invoices_payment_id_payments')),
    sa.PrimaryKeyConstraint('id', name=op.f('pk_payment_invoices'))
    )
    op.create_index(op.f('ix_payment_invoices_id'), 'payment_invoices', ['id'], unique=False)
    op.create_index(op.f('ix_payment_invoices_invoice_id'), 'payment_invoices', ['invoice_id'], unique=False)
    op.create_index(op.f('ix_payment_invoices_payment_id'), 'payment_invoices', ['payment_id'], unique=False)
    op.create_table('bank_reconciliations',
    sa.Column('extract_line_id', sa.UUID(), nullable=False),
    sa.Column('payment_id', sa.UUID(), nullable=True),
    sa.Column('invoice_id', sa.UUID(), nullable=True),
    sa.Column('amount', sa.Numeric(precision=15, scale=2), nullable=False),
    sa.Column('reconciliation_type', sa.Enum('PAYMENT', 'INVOICE', 'MANUAL', 'AUTOMATIC', name='reconciliationtype'), nullable=False),
    sa.Column('reconciliation_date', sa.Date(), nullable=False),
    sa.Column('description', sa.Text(), nullable=True),
    sa.Column('notes', sa.Text(), nullable=True),
    sa.Column('is_confirmed', sa.Boolean(), nullable=False),
    sa.Column('created_by_id', sa.UUID(), nullable=False),
    sa.Column('confirmed_by_id', sa.UUID(), nullable=True),
    sa.Column('confirmed_at', sa.DateTime(timezone=True), nullable=True),
    sa.Column('id', sa.UUID(), nullable=False),
    sa.Column('created_at', sa.DateTime(timezone=True), nullable=False),
    sa.Column('updated_at', sa.DateTime(timezone=True), nullable=False),
    sa.ForeignKeyConstraint(['confirmed_by_id'], ['users.id'], name=op.f('fk_bank_reconciliations_confirmed_by_id_users')),
    sa.ForeignKeyConstraint(['created_by_id'], ['users.id'], name=op.f('fk_bank_reconciliations_created_by_id_users')),
    sa.ForeignKeyConstraint(['extract_line_id'], ['bank_extract_lines.id'], name=op.f('fk_bank_reconciliations_extract_line_id_bank_extract_lines')),
    sa.ForeignKeyConstraint(['invoice_id'], ['invoices.id'], name=op.f('fk_bank_reconciliations_invoice_id_invoices')),
    sa.ForeignKeyConstraint(['payment_id'], ['payments.id'], name=op.f('fk_bank_reconciliations_payment_id_payments')),
    sa.PrimaryKeyConstraint('id', name=op.f('pk_bank_reconciliations'))
    )
    op.create_index(op.f('ix_bank_reconciliations_extract_line_id'), 'bank_reconciliations', ['extract_line_id'], unique=False)
    op.create_index(op.f('ix_bank_reconciliations_id'), 'bank_reconciliations', ['id'], unique=False)
    op.create_index(op.f('ix_bank_reconciliations_invoice_id'), 'bank_reconciliations', ['invoice_id'], unique=False)
    op.create_index(op.f('ix_bank_reconciliations_payment_id'), 'bank_reconciliations', ['payment_id'], unique=False)
    op.create_table('nfe_items',
    sa.Column('nfe_id', sa.UUID(), nullable=False),
    sa.Column('numero_item', sa.Integer(), nullable=False, comment='N√∫mero sequencial do item'),
    sa.Column('codigo_produto', sa.String(length=100), nullable=False),
    sa.Column('descricao_produto', sa.String(length=1000), nullable=False),
    sa.Column('ncm', sa.String(length=8), nullable=True),
    sa.Column('cfop', sa.String(length=4), nullable=False),
    sa.Column('unidade_comercial', sa.String(length=20), nullable=False),
    sa.Column('quantidade_comercial', sa.Numeric(precision=15, scale=4), nullable=False),
    sa.Column('valor_unitario_comercial', sa.Numeric(precision=15, scale=6), nullable=False),
    sa.Column('valor_total_produto', sa.Numeric(precision=15, scale=2), nullable=False),
    sa.Column('valor_icms', sa.Numeric(precision=15, scale=2), nullable=False),
    sa.Column('valor_ipi', sa.Numeric(precision=15, scale=2), nullable=False),
    sa.Column('valor_pis', sa.Numeric(precision=15, scale=2), nullable=False),
    sa.Column('valor_cofins', sa.Numeric(precision=15, scale=2), nullable=False),
    sa.Column('product_id', sa.UUID(), nullable=True, comment='Produto cadastrado no sistema'),
    sa.Column('xml_metadata', sa.JSON(), nullable=True, comment='Metadados do item extra√≠dos do XML'),
    sa.Column('id', sa.UUID(), nullable=False),
    sa.Column('created_at', sa.DateTime(timezone=True), nullable=False),
    sa.Column('updated_at', sa.DateTime(timezone=True), nullable=False),
    sa.ForeignKeyConstraint(['nfe_id'], ['nfes.id'], name=op.f('fk_nfe_items_nfe_id_nfes')),
    sa.ForeignKeyConstraint(['product_id'], ['products.id'], name=op.f('fk_nfe_items_product_id_products')),
    sa.PrimaryKeyConstraint('id', name=op.f('pk_nfe_items'))
    )
    op.create_index(op.f('ix_nfe_items_id'), 'nfe_items', ['id'], unique=False)
    op.create_index(op.f('ix_nfe_items_nfe_id'), 'nfe_items', ['nfe_id'], unique=False)
    # ### end Alembic commands ###


def downgrade() -> None:
    """Downgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_index(op.f('ix_nfe_items_nfe_id'), table_name='nfe_items')
    op.drop_index(op.f('ix_nfe_items_id'), table_name='nfe_items')
    op.drop_table('nfe_items')
    op.drop_index(op.f('ix_bank_reconciliations_payment_id'), table_name='bank_reconciliations')
    op.drop_index(op.f('ix_bank_reconciliations_invoice_id'), table_name='bank_reconciliations')
    op.drop_index(op.f('ix_bank_reconciliations_id'), table_name='bank_reconciliations')
    op.drop_index(op.f('ix_bank_reconciliations_extract_line_id'), table_name='bank_reconciliations')
    op.drop_table('bank_reconciliations')
    op.drop_index(op.f('ix_payment_invoices_payment_id'), table_name='payment_invoices')
    op.drop_index(op.f('ix_payment_invoices_invoice_id'), table_name='payment_invoices')
    op.drop_index(op.f('ix_payment_invoices_id'), table_name='payment_invoices')
    op.drop_table('payment_invoices')
    op.drop_index(op.f('ix_nfes_numero_nfe'), table_name='nfes')
    op.drop_index(op.f('ix_nfes_id'), table_name='nfes')
    op.drop_index(op.f('ix_nfes_cpf_destinatario'), table_name='nfes')
    op.drop_index(op.f('ix_nfes_cnpj_emitente'), table_name='nfes')
    op.drop_index(op.f('ix_nfes_cnpj_destinatario'), table_name='nfes')
    op.drop_index(op.f('ix_nfes_chave_nfe'), table_name='nfes')
    op.drop_table('nfes')
    op.drop_index(op.f('ix_invoice_lines_invoice_id'), table_name='invoice_lines')
    op.drop_index(op.f('ix_invoice_lines_id'), table_name='invoice_lines')
    op.drop_table('invoice_lines')
    op.drop_index(op.f('ix_bank_extract_lines_payment_id'), table_name='bank_extract_lines')
    op.drop_index(op.f('ix_bank_extract_lines_id'), table_name='bank_extract_lines')
    op.drop_index(op.f('ix_bank_extract_lines_bank_extract_id'), table_name='bank_extract_lines')
    op.drop_table('bank_extract_lines')
    op.drop_index(op.f('ix_payments_third_party_id'), table_name='payments')
    op.drop_index(op.f('ix_payments_number'), table_name='payments')
    op.drop_index(op.f('ix_payments_id'), table_name='payments')
    op.drop_table('payments')
    op.drop_index(op.f('ix_journal_entry_lines_id'), table_name='journal_entry_lines')
    op.drop_table('journal_entry_lines')
    op.drop_index(op.f('ix_invoices_third_party_id'), table_name='invoices')
    op.drop_index(op.f('ix_invoices_number'), table_name='invoices')
    op.drop_index(op.f('ix_invoices_id'), table_name='invoices')
    op.drop_table('invoices')
    op.drop_index(op.f('ix_journal_entries_number'), table_name='journal_entries')
    op.drop_index(op.f('ix_journal_entries_journal_id'), table_name='journal_entries')
    op.drop_index(op.f('ix_journal_entries_id'), table_name='journal_entries')
    op.drop_table('journal_entries')
    op.drop_index(op.f('ix_bank_journal_configs_id'), table_name='bank_journal_configs')
    op.drop_table('bank_journal_configs')
    op.drop_index(op.f('ix_third_parties_third_party_type'), table_name='third_parties')
    op.drop_index(op.f('ix_third_parties_name'), table_name='third_parties')
    op.drop_index(op.f('ix_third_parties_id'), table_name='third_parties')
    op.drop_index(op.f('ix_third_parties_document_number'), table_name='third_parties')
    op.drop_index(op.f('ix_third_parties_code'), table_name='third_parties')
    op.drop_table('third_parties')
    op.drop_index(op.f('ix_taxes_id'), table_name='taxes')
    op.drop_index(op.f('ix_taxes_code'), table_name='taxes')
    op.drop_table('taxes')
    op.drop_index(op.f('ix_products_name'), table_name='products')
    op.drop_index(op.f('ix_products_id'), table_name='products')
    op.drop_index(op.f('ix_products_code'), table_name='products')
    op.drop_index(op.f('ix_products_category'), table_name='products')
    op.drop_table('products')
    op.drop_index(op.f('ix_journals_type'), table_name='journals')
    op.drop_index(op.f('ix_journals_id'), table_name='journals')
    op.drop_index(op.f('ix_journals_code'), table_name='journals')
    op.drop_table('journals')
    op.drop_index(op.f('ix_bank_extracts_id'), table_name='bank_extracts')
    op.drop_index(op.f('ix_bank_extracts_account_id'), table_name='bank_extracts')
    op.drop_table('bank_extracts')
    op.drop_index(op.f('ix_user_sessions_id'), table_name='user_sessions')
    op.drop_table('user_sessions')
    op.drop_index(op.f('ix_system_configuration_key'), table_name='system_configuration')
    op.drop_index(op.f('ix_system_configuration_id'), table_name='system_configuration')
    op.drop_index(op.f('ix_system_configuration_category'), table_name='system_configuration')
    op.drop_table('system_configuration')
    op.drop_index(op.f('ix_payment_schedules_id'), table_name='payment_schedules')
    op.drop_table('payment_schedules')
    op.drop_index(op.f('ix_change_tracking_timestamp'), table_name='change_tracking')
    op.drop_index(op.f('ix_change_tracking_id'), table_name='change_tracking')
    op.drop_table('change_tracking')
    op.drop_index(op.f('ix_audit_logs_timestamp'), table_name='audit_logs')
    op.drop_index(op.f('ix_audit_logs_id'), table_name='audit_logs')
    op.drop_table('audit_logs')
    op.drop_index(op.f('ix_accounts_parent_id'), table_name='accounts')
    op.drop_index(op.f('ix_accounts_id'), table_name='accounts')
    op.drop_index(op.f('ix_accounts_code'), table_name='accounts')
    op.drop_table('accounts')
    op.drop_index(op.f('ix_users_id'), table_name='users')
    op.drop_index(op.f('ix_users_email'), table_name='users')
    op.drop_table('users')
    op.drop_index(op.f('ix_payment_terms_id'), table_name='payment_terms')
    op.drop_index(op.f('ix_payment_terms_code'), table_name='payment_terms')
    op.drop_table('payment_terms')
    op.drop_index(op.f('ix_number_sequences_sequence_type'), table_name='number_sequences')
    op.drop_index(op.f('ix_number_sequences_id'), table_name='number_sequences')
    op.drop_table('number_sequences')
    op.drop_index(op.f('ix_cost_centers_name'), table_name='cost_centers')
    op.drop_index(op.f('ix_cost_centers_id'), table_name='cost_centers')
    op.drop_index(op.f('ix_cost_centers_code'), table_name='cost_centers')
    op.drop_table('cost_centers')
    op.drop_index(op.f('ix_company_info_id'), table_name='company_info')
    op.drop_table('company_info')
    # ### end Alembic commands ###