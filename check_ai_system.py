#!/usr/bin/env python3
"""
Script para verificar y diagnosticar problemas del sistema de IA
"""
import os
import sys
import logging
from typing import Dict, Any

# Configurar logging
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

def check_dependencies():
    """Verifica que todas las dependencias est√©n instaladas"""
    dependencies = {
        'openai': 'openai',
        'langdetect': 'langdetect', 
        'transformers': 'transformers',
        'torch': 'torch',
        'sentencepiece': 'sentencepiece'
    }
    
    results = {}
    for name, module in dependencies.items():
        try:
            __import__(module)
            results[name] = "‚úÖ Instalado"
        except ImportError as e:
            results[name] = f"‚ùå No instalado: {e}"
    
    return results

def check_openai_config():
    """Verifica la configuraci√≥n de OpenAI"""
    try:
        from app.config import settings
        api_key = getattr(settings, 'OPENAI_API_KEY', None)
        
        if not api_key:
            return "‚ùå OPENAI_API_KEY no configurada"
        
        if api_key.startswith('sk-'):
            # Verificar que la clave no est√© vencida o sin cuota
            try:
                import openai
                client = openai.OpenAI(api_key=api_key)
                
                # Intentar una llamada simple para verificar la clave
                response = client.models.list()
                return "‚úÖ Clave OpenAI v√°lida"
                
            except Exception as e:
                if "insufficient_quota" in str(e):
                    return "‚ö†Ô∏è Clave v√°lida pero sin cuota disponible"
                elif "invalid_api_key" in str(e):
                    return "‚ùå Clave OpenAI inv√°lida"
                else:
                    return f"‚ö†Ô∏è Error verificando OpenAI: {e}"
        else:
            return "‚ùå Formato de clave OpenAI inv√°lido"
            
    except Exception as e:
        return f"‚ùå Error verificando configuraci√≥n: {e}"

def check_translation_service():
    """Verifica el servicio de traducci√≥n"""
    try:
        from app.services.translation import translation_service
        
        # Verificar detecci√≥n de idioma
        lang = translation_service.detect_language("Hola mundo")
        if lang != 'es':
            return f"‚ö†Ô∏è Detecci√≥n de idioma incorrecta: {lang}"
        
        # Intentar cargar pipelines
        if not translation_service.pipelines_loaded:
            translation_service._load_translation_pipelines()
        
        # Verificar traducci√≥n
        resultado = translation_service.translate_to_english("Hola mundo", "es")
        
        if resultado == "Hola mundo":
            return "‚ö†Ô∏è Traducci√≥n usando fallback (sin modelos)"
        else:
            return "‚úÖ Traducci√≥n funcionando"
            
    except Exception as e:
        return f"‚ùå Error en servicio de traducci√≥n: {e}"

def check_huggingface_config():
    """Verifica la configuraci√≥n de HuggingFace"""
    try:
        from app.config import settings
        token = getattr(settings, 'HUGGINGFACE_API_TOKEN', None)
        
        if not token:
            return "‚ùå HUGGINGFACE_API_TOKEN no configurada"
        
        if token.startswith('hf_'):
            return "‚úÖ Token HuggingFace configurado"
        else:
            return "‚ö†Ô∏è Formato de token HuggingFace inv√°lido"
            
    except Exception as e:
        return f"‚ùå Error verificando configuraci√≥n HF: {e}"

def main():
    """Funci√≥n principal de diagn√≥stico"""
    print("üîç Diagn√≥stico del Sistema de IA")
    print("=" * 50)
    
    # Verificar dependencias
    print("\nüì¶ Dependencias:")
    deps = check_dependencies()
    for name, status in deps.items():
        print(f"  {name}: {status}")
    
    # Verificar OpenAI
    print(f"\nü§ñ OpenAI: {check_openai_config()}")
    
    # Verificar HuggingFace
    print(f"\nü§ó HuggingFace: {check_huggingface_config()}")
    
    # Verificar traducci√≥n
    print(f"\nüåê Traducci√≥n: {check_translation_service()}")
    
    print("\n" + "=" * 50)
    print("‚úÖ Diagn√≥stico completado")
    
    # Sugerencias
    print("\nüí° Sugerencias:")
    
    missing_deps = [name for name, status in deps.items() if "‚ùå" in status]
    if missing_deps:
        print(f"  - Instalar dependencias faltantes: pip install {' '.join(missing_deps)}")
    
    openai_status = check_openai_config()
    if "sin cuota" in openai_status:
        print("  - Verificar cuota de OpenAI en https://platform.openai.com/account/usage")
        print("  - Agregar cr√©ditos a la cuenta de OpenAI")
    
    if "fallback" in check_translation_service():
        print("  - Los modelos T5 no est√°n cargados, verificar instalaci√≥n de transformers y torch")

if __name__ == "__main__":
    main()
