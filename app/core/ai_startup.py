"""
Configuraci√≥n de startup para servicios de IA
"""
import logging
import asyncio
from contextlib import asynccontextmanager
from fastapi import FastAPI

from app.services.translation import translation_service
from app.services.hf_client import hf_client

logger = logging.getLogger(__name__)


async def initialize_ai_services():
    """Inicializa todos los servicios de IA necesarios"""
    try:
        logger.info("üöÄ Inicializando servicios de IA...")
        
        # Los servicios de traducci√≥n se inicializan autom√°ticamente
        # al instanciar translation_service (patr√≥n singleton)
        logger.info("‚úÖ Servicios de traducci√≥n inicializados")
        
        # El cliente de HF se inicializa autom√°ticamente
        logger.info("‚úÖ Cliente de Hugging Face configurado")
        
        logger.info("üéâ Todos los servicios de IA est√°n listos")
        
    except Exception as e:
        logger.error(f"‚ùå Error inicializando servicios de IA: {e}")
        raise


async def cleanup_ai_services():
    """Limpia los recursos de los servicios de IA"""
    try:
        logger.info("üßπ Limpiando servicios de IA...")
        
        # Cerrar cliente HTTP de Hugging Face
        await hf_client.close()
        
        logger.info("‚úÖ Servicios de IA limpiados correctamente")
        
    except Exception as e:
        logger.error(f"‚ùå Error limpiando servicios de IA: {e}")


@asynccontextmanager
async def ai_lifespan(app: FastAPI):
    """Context manager para el ciclo de vida de servicios de IA"""
    # Startup
    await initialize_ai_services()
    
    try:
        yield
    finally:
        # Shutdown
        await cleanup_ai_services()
