#!/usr/bin/env python3
"""
Test de la nueva generaci√≥n de c√≥digos de productos con secuencia y sufijo aleatorio
"""

def test_new_product_code_generation():
    """Test de la nueva funci√≥n de generaci√≥n de c√≥digos de productos"""
    print("üß™ Probando nueva generaci√≥n de c√≥digos de productos")
    print("=" * 60)
    
    try:
        from app.utils.codes import generate_product_code
        from app.database import SessionLocal
        
        # Crear sesi√≥n de base de datos
        db = SessionLocal()
        
        try:
            # Test con productos similares que anteriormente causaban duplicados
            test_products = [
                ("√Ålcool Polivin√≠lico 500 g", "product"),
                ("√Ålcool n-Am√≠lico P.A./ACS 1000 mL", "product"),
                ("√Ålcool n-But√≠lico P.A./ACS 1000 mL", "product"),
                ("√Ålcool n-Prop√≠lico P.A. 5000 mL", "product"),
                ("√Ålcool sec-But√≠lico P.A. 1000 mL", "product"),
                ("√ìxido de Alum√≠nio 90 (S) Neutro 500 g", "product"),
                ("√ìxido de Ars√™nio III P.A. 100 g", "product"),
                ("√ìxido de Bismuto III P.A. 500 g", "product"),
                ("Servicio de Consultor√≠a", "service"),
                ("Servicio de Soporte T√©cnico", "service"),
                ("Producto y Servicio Mixto", "both")
            ]
            
            generated_codes = []
            
            print("\nüîß Generando c√≥digos de prueba:")
            for i, (name, product_type) in enumerate(test_products, 1):
                try:
                    code = generate_product_code(db, name, product_type)
                    generated_codes.append(code)
                    print(f"{i:2d}. {name[:40]:<40} ‚Üí {code}")
                except Exception as e:
                    print(f"{i:2d}. ERROR: {name[:40]:<40} ‚Üí {str(e)}")
            
            print(f"\nüìä Resultados:")
            print(f"   Total de c√≥digos generados: {len(generated_codes)}")
            print(f"   C√≥digos √∫nicos: {len(set(generated_codes))}")
            
            # Verificar que todos los c√≥digos son √∫nicos
            if len(generated_codes) == len(set(generated_codes)):
                print("   ‚úÖ Todos los c√≥digos son √∫nicos")
            else:
                print("   ‚ùå Hay c√≥digos duplicados")
                duplicates = [code for code in set(generated_codes) if generated_codes.count(code) > 1]
                print(f"   Duplicados: {duplicates}")
            
            print(f"\nüéØ Caracter√≠sticas de los c√≥digos generados:")
            
            # Analizar patrones
            prefixes = {}
            for code in generated_codes:
                prefix = code.split('-')[0]
                prefixes[prefix] = prefixes.get(prefix, 0) + 1
            
            print(f"   Prefijos utilizados: {prefixes}")
            
            # Mostrar ejemplos de c√≥digos por tipo
            print(f"\nüìù Ejemplos por tipo:")
            prd_codes = [c for c in generated_codes if c.startswith('PRD-')]
            srv_codes = [c for c in generated_codes if c.startswith('SRV-')]
            mix_codes = [c for c in generated_codes if c.startswith('MIX-')]
            
            if prd_codes:
                print(f"   Productos (PRD): {prd_codes[:3]} {'...' if len(prd_codes) > 3 else ''}")
            if srv_codes:
                print(f"   Servicios (SRV): {srv_codes[:3]} {'...' if len(srv_codes) > 3 else ''}")
            if mix_codes:
                print(f"   Mixtos (MIX): {mix_codes[:3]} {'...' if len(mix_codes) > 3 else ''}")
            
            print(f"\n‚ú® Beneficios de la nueva implementaci√≥n:")
            print(f"   ‚úÖ Secuencia num√©rica evita conflictos principales")
            print(f"   ‚úÖ Sufijo aleatorio garantiza unicidad")
            print(f"   ‚úÖ Formato consistente: PREFIX-NAMEPART-SEQ-RANDOM")
            print(f"   ‚úÖ Maneja nombres similares sin duplicados")
            print(f"   ‚úÖ Escalable para gran volumen de productos")
            
        finally:
            db.close()
            
    except ImportError as e:
        print(f"‚ùå Error de importaci√≥n: {e}")
        print("   Aseg√∫rate de que las dependencias est√©n instaladas")
    except Exception as e:
        print(f"‚ùå Error inesperado: {e}")
        import traceback
        traceback.print_exc()

def test_code_collision_resistance():
    """Test de resistencia a colisiones de c√≥digos"""
    print("\nüõ°Ô∏è Probando resistencia a colisiones")
    print("-" * 40)
    
    try:
        from app.utils.codes import generate_product_code
        from app.database import SessionLocal
        
        db = SessionLocal()
        
        try:
            # Generar m√∫ltiples c√≥digos para el mismo nombre
            base_name = "Producto de Prueba"
            codes = []
            
            for i in range(5):
                code = generate_product_code(db, base_name, "product")
                codes.append(code)
                print(f"   Intento {i+1}: {code}")
            
            unique_codes = len(set(codes))
            print(f"\n   C√≥digos √∫nicos generados: {unique_codes}/{len(codes)}")
            
            if unique_codes == len(codes):
                print("   ‚úÖ Todos los c√≥digos son √∫nicos")
            else:
                print("   ‚ùå Hay duplicados")
                
        finally:
            db.close()
            
    except Exception as e:
        print(f"   ‚ùå Error: {e}")

if __name__ == "__main__":
    print("üöÄ Test de generaci√≥n de c√≥digos de productos mejorada")
    print("=" * 70)
    
    test_new_product_code_generation()
    test_code_collision_resistance()
    
    print(f"\nüéâ Pruebas completadas")
    print(f"\nüìö Formato de c√≥digos:")
    print(f"   Productos:  PRD-NAMEPART-001-A4B")
    print(f"   Servicios:  SRV-NAMEPART-001-X9Z")
    print(f"   Mixtos:     MIX-NAMEPART-001-K2M")
    print(f"\n   Donde:")
    print(f"   - NAMEPART: Primeros 6 caracteres alfanum√©ricos del nombre")
    print(f"   - 001: N√∫mero secuencial (3 d√≠gitos)")
    print(f"   - A4B: Sufijo aleatorio (3 caracteres)")
