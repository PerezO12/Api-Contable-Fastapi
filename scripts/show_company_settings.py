#!/usr/bin/env python3
"""
Script para verificar la configuraci√≥n actual de la compa√±√≠a.
"""
import asyncio
import logging
from sqlalchemy import select
from sqlalchemy.ext.asyncio import AsyncSession

from app.database import AsyncSessionLocal
from app.models.company_settings import CompanySettings

# Configurar logging
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

async def show_current_company_settings():
    """Mostrar la configuraci√≥n actual de la compa√±√≠a"""
    
    async with AsyncSessionLocal() as session:
        session: AsyncSession
        
        try:
            # Buscar configuraci√≥n existente
            stmt = select(CompanySettings).limit(1)
            result = await session.execute(stmt)
            settings = result.scalar_one_or_none()
            
            if not settings:
                print("‚ùå No se encontr√≥ configuraci√≥n de compa√±√≠a")
                return
            
            print("üè¢ CONFIGURACI√ìN ACTUAL DE LA COMPA√ë√çA:")
            print("=" * 60)
            print(f"ID: {settings.id}")
            print(f"Nombre: {settings.company_name}")
            print(f"RUT/Tax ID: {settings.tax_id}")
            print(f"Moneda: {settings.currency_code}")
            print(f"Activa: {settings.is_active}")
            print()
            
            print("üìä CUENTAS CONFIGURADAS:")
            print(f"  ‚Ä¢ Por cobrar (clientes): {settings.default_customer_receivable_account_id}")
            print(f"  ‚Ä¢ Por pagar (proveedores): {settings.default_supplier_payable_account_id}")
            print(f"  ‚Ä¢ Suspensi√≥n bancaria: {settings.bank_suspense_account_id}")
            print(f"  ‚Ä¢ Transferencias internas: {settings.internal_transfer_account_id}")
            print(f"  ‚Ä¢ Gastos diferidos: {settings.deferred_expense_account_id}")
            print(f"  ‚Ä¢ Ingresos diferidos: {settings.deferred_revenue_account_id}")
            print(f"  ‚Ä¢ Descuento ganancia pago anticipado: {settings.early_payment_discount_gain_account_id}")
            print(f"  ‚Ä¢ Descuento p√©rdida pago anticipado: {settings.early_payment_discount_loss_account_id}")
            print()
            
            print("üìã JOURNALS CONFIGURADOS:")
            print(f"  ‚Ä¢ Gastos diferidos: {settings.deferred_expense_journal_id}")
            print(f"  ‚Ä¢ Ingresos diferidos: {settings.deferred_revenue_journal_id}")
            print()
            
            print("‚öôÔ∏è CONFIGURACI√ìN ADICIONAL:")
            print(f"  ‚Ä¢ Validar facturas en contabilizaci√≥n: {settings.validate_invoice_on_posting}")
            print(f"  ‚Ä¢ Descuentos en misma cuenta: {settings.invoice_line_discount_same_account}")
            print(f"  ‚Ä¢ Meses gastos diferidos: {settings.deferred_expense_months}")
            print(f"  ‚Ä¢ Meses ingresos diferidos: {settings.deferred_revenue_months}")
            print(f"  ‚Ä¢ M√©todo generaci√≥n diferidos: {settings.deferred_generation_method}")
            
        except Exception as e:
            logger.error(f"‚ùå Error al obtener configuraci√≥n: {str(e)}")
            raise

async def main():
    """Funci√≥n principal"""
    await show_current_company_settings()

if __name__ == "__main__":
    asyncio.run(main())
